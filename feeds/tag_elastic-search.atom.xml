<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/tag_elastic-search.atom.xml" rel="self"></link><id>/</id><updated>2020-07-23T00:00:00+00:00</updated><entry><title>NLPeasy - a Workflow to Analyse, Enrich, and Explore Textual Data</title><link href="/europython-2020/nlpeasy-a-workflow-to-analyse-enrich-and-explore-textual-data.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Philipp Thomann</name></author><id>tag:,2020-07-23:europython-2020/nlpeasy-a-workflow-to-analyse-enrich-and-explore-textual-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Use pre-trained NLP-models, ingest into Elastic Search, and enjoy auto-generated Kibana dashboards!&lt;/p&gt;
&lt;p&gt;Ever wanted to try out NLP methods but it felt it too cumbersome to set up a workflow for textual data? How to enrich your data based on textual features and explore the results?&lt;/p&gt;
&lt;p&gt;NLPeasy (&lt;a class="reference external" href="https://github.com/d-one/NLPeasy"&gt;https://github.com/d-one/NLPeasy&lt;/a&gt;) does that: Enrich the data using well-known pre-trained models (Word embeddings, Sentiment Analysics, POS, Dependency Parsing). Then start the Elastic Stack on your Docker. Set-up indices and ingest it in bulk. And finally generate Kibana dashboards to explore the results.&lt;/p&gt;
&lt;p&gt;Complicated? Not at all! Just do it in a simple Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;In this presentation we will give an architecture overview of the different components and demonstrate the capabilities of this Python package.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Data Science"></category><category term="Elastic Search"></category><category term="Machine-Learning"></category><category term="Natural Language Processing"></category></entry></feed>