<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Sun, 05 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Flasky Goodness (or Why Django Sucks?)</title><link>/djangocon-us-2012/flasky-goodness-or-why-django-sucks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk dives into the specifics of why Django isn't always the best
tool for the job, general frustrations with the framework, and potential
fixes. It will balance out with many Django praises too, of course.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk dives into the specifics of why Django isn't always the best
tool for the job, general frustrations with the framework, and potential
fixes.&lt;/p&gt;
&lt;p&gt;It will balance out with many Django praises too, of course.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Reitz</dc:creator><pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2012-09-05:djangocon-us-2012/flasky-goodness-or-why-django-sucks.html</guid><category>flask</category></item><item><title>An iPhone-Python love affair: Building APIs for mobile</title><link>/europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mobile apps are the hot item of the day - and the best mobile apps are
backed by a great website. Python web developer Nate Aune and iPhone
developer Anna Callahan will show you how we built a simple music web
app in Django with a native iPhone app that communicates with it.
Attendees of this talk will see a concrete case study of building an
application that exposes an API for mobile devices.&lt;/p&gt;
&lt;p&gt;Our web app exposes a JSON API for sending and receiving data from the
mobile device. We’ll talk about why we chose Django and the TastyPie API
package, and discuss other Python-based frameworks that could be used to
build the API such as Pyramid, Flask and Bottle. We’ll also compare REST
and custom APIs to understand best practices for building APIs designed
for mobile devices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Callahan</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2011-07-07:europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</guid><category>api</category><category>django</category><category>flask</category><category>json</category><category>mobile</category><category>rest</category><category>tastypie</category><category>web</category></item><item><title>Bringing Spatial Love to your Python Application</title><link>/europython-2013/bringing-spatial-love-to-your-python-application.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Citron-Pousty</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-03:europython-2013/bringing-spatial-love-to-your-python-application.html</guid><category>flask</category><category>mongodb</category><category>geospatial</category><category>REST</category></item><item><title>Coding for the Modern Warzone</title><link>/europython-2013/coding-for-the-modern-warzone.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gemma Hentsch</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-03:europython-2013/coding-for-the-modern-warzone.html</guid><category>udp</category><category>networking</category><category>flask</category><category>tcp</category><category>application-design</category><category>architecture</category><category>resilience</category></item><item><title>Python in the cloud with PaaS - Part 1</title><link>/europython-2013/python-in-the-cloud-with-paas-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Citron-Pousty</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-03:europython-2013/python-in-the-cloud-with-paas-part-1.html</guid><category>flask</category><category>mongodb</category><category>geospatial</category><category>postgresql</category><category>cloud</category></item><item><title>Python in the cloud with PaaS - Part 2</title><link>/europython-2013/python-in-the-cloud-with-paas-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Citron-Pousty</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-03:europython-2013/python-in-the-cloud-with-paas-part-2.html</guid><category>flask</category><category>mongodb</category><category>geospatial</category><category>postgresql</category><category>cloud</category></item><item><title>Will ipython replace bash?</title><link>/europython-2013/will-ipython-replace-bash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While python is widely used for automating administration tasks, it’s
not still widely known and used between system administrators.&lt;/p&gt;
&lt;p&gt;iPython is an interactive python shell that embeds bash functionalities.
We’ll show how to :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;replace some bash tasks avoiding common errors&lt;/li&gt;
&lt;li&gt;resembling some bash behaviour&lt;/li&gt;
&lt;li&gt;create testing (nose) and monitoring scripts&lt;/li&gt;
&lt;li&gt;reuse existing python modules (eg.iotop, psutil, …)&lt;/li&gt;
&lt;li&gt;use flask to expose those scripts on HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see something specific? Leave a comment! We’ll tune the talk
agenda on the audience interests!&lt;/p&gt;
&lt;div class="section" id="there-is-also-a-teaser-video"&gt;
&lt;h4&gt;There is also a teaser video.&lt;/h4&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-03:europython-2013/will-ipython-replace-bash.html</guid><category>flask</category><category>testing</category><category>devops</category><category>sysadmin</category><category>linux</category><category>iPython</category><category>bash</category></item><item><title>API Flask com front-end em Vue.js</title><link>/flask-conf-2018/api-flask-com-front-end-em-vuejs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API Flask com front-end em Vue.js - Palestra de João Lugão na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">João Lugão</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/api-flask-com-front-end-em-vuejs.html</guid><category>flask</category><category>api</category><category>vue.js</category></item><item><title>Aplicações web com Flask e Docker</title><link>/flask-conf-2018/aplicacoes-web-com-flask-e-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aplicações web com Flask e Docker - Palestra de Felipe Alcantara na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felipe Alcantara</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/aplicacoes-web-com-flask-e-docker.html</guid><category>flask</category><category>docker</category></item><item><title>Escrevendo Testes com Flask e #JustPython</title><link>/flask-conf-2018/escrevendo-testes-com-flask-e-justpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Escrevendo Testes com Flask e #JustPython - Palestra de Eduardo Mendes na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Mendes</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/escrevendo-testes-com-flask-e-justpython.html</guid><category>flask</category><category>testes</category><category>python</category></item><item><title>Flask Profiling - Identificando pontos criticos de performance</title><link>/flask-conf-2018/flask-profiling-identificando-pontos-criticos-de-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask Profiling - Identificando pontos criticos de performance - Palestra de Iuri de Silvio na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/flask-profiling-identificando-pontos-criticos-de-performance.html</guid><category>flask</category><category>profiling</category><category>performance</category></item><item><title>Flask + PWA - Mobile Applications</title><link>/flask-conf-2018/flask-pwa-mobile-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask + PWA - Mobile Applications - Palestra de Luiz Lima na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luiz Lima</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/flask-pwa-mobile-applications.html</guid><category>flask</category><category>pwa</category><category>mobile</category></item><item><title>Inteligência Artificial com Flask e Raspberry Pi</title><link>/flask-conf-2018/inteligencia-artificial-com-flask-e-raspberry-pi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Inteligência Artificial com Flask e Raspberry Pi - Palestra de Eduardo Pereira na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Pereira</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/inteligencia-artificial-com-flask-e-raspberry-pi.html</guid><category>inteligencia artificial</category><category>flask</category></item><item><title>Introdução ao Sanic - O clone Assíncrono do Flask</title><link>/flask-conf-2018/introducao-ao-sanic-o-clone-assincrono-do-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introdução ao Sanic - O clone Assíncrono do Flask - Palestra de Danilo Bellini na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Danilo Bellini</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/introducao-ao-sanic-o-clone-assincrono-do-flask.html</guid><category>sonic</category><category>flask</category><category>assincrono</category></item><item><title>Usando o Flask Admin com Segurança e Flexibilidade</title><link>/flask-conf-2018/usando-o-flask-admin-com-seguranca-e-flexibilidade.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Usando o Flask Admin com Segurança e Flexibilidade - Palestra de Bruno Rocha na Flask Conf 2018.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Rocha</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:flask-conf-2018/usando-o-flask-admin-com-seguranca-e-flexibilidade.html</guid><category>flask</category><category>admin</category><category>flask-admin</category></item><item><title>Async Flask, an introduction to Quart</title><link>/flaskcon-2020/async-flask-an-introduction-to-quart.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quart is the Flask API re-implemented in async/await. This talk will introduce Quart and explain how it relates to Flask. Then I'll talk about potential async support in Flask and discuss the future relationship between the Quart and Flask.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Jones</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/async-flask-an-introduction-to-quart.html</guid><category>Flask</category><category>FlaskCon</category></item><item><title>Automatically generate test-cases – Schema-based API testing</title><link>/flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster. The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time. I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo. I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools. By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today. The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hultnér</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html</guid><category>flask context</category><category>Flask</category><category>FlaskCon</category></item><item><title>Dynamic static sites - Implementing an oxymoron</title><link>/flaskcon-2020/dynamic-static-sites-implementing-an-oxymoron.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static websites have been around since the start of the internet. They’re fast, secure and easy to maintain. Combining your static sites with 3rd party APIs enables you at make your website feel and function like a traditional dynamic website with all the upsides of a static site. In this talk Shy Ruparel, developer evangelist at Contentful, examines the history of static sites, their benefits, how to make them dynamic all while using Flask!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shy Ruparel</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/dynamic-static-sites-implementing-an-oxymoron.html</guid><category>Flask</category><category>FlaskCon</category></item><item><title>Flask-Appbuilder new REST API, and Superset MVC to SPA revamp</title><link>/flaskcon-2020/flask-appbuilder-new-rest-api-and-superset-mvc-to-spa-revamp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick presentation around Flask-AppBuilder new REST API - Automatic and configurable OpenAPI specs - Apache Superset MVC to SPA revamp (challenges, direction) - Security, monitoring metrics (statsd, datadog) Edit from ARJ: FlaskAppBuilder is the project Apache Airflow was built on&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Gaspar</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/flask-appbuilder-new-rest-api-and-superset-mvc-to-spa-revamp.html</guid><category>Flask-appbuilder</category><category>Flask</category><category>FlaskCon</category></item><item><title>Flask's flexibility for the win (when building applications that don't follow the normal patterns)</title><link>/flaskcon-2020/flasks-flexibility-for-the-win-when-building-applications-that-dont-follow-the-normal-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask's flexibility made it the ideal choice of web framework to develop a semantic graph-based application. Specifically, being able to &amp;quot;hook up&amp;quot; a custom data back-end without breaking a sweat clinched the deal. The application in question that I would like to talk about is Contextualise (&lt;a class="reference external" href="https://www.contextualise.dev/"&gt;https://www.contextualise.dev/&lt;/a&gt;), a (personal) knowledge management application. Contextualise is an open source project: &lt;a class="reference external" href="https://github.com/brettkromkamp/contextualise"&gt;https://github.com/brettkromkamp/contextualise&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Kromkamp</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/flasks-flexibility-for-the-win-when-building-applications-that-dont-follow-the-normal-patterns.html</guid><category>flask context</category><category>Flask</category><category>FlaskCon</category></item><item><title>Taming OAuth with Flask-Dance</title><link>/flaskcon-2020/taming-oauth-with-flask-dance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many well-known APIs use OAuth for authentication, including Google, Facebook, Twitter, and GitHub. OAuth is a notoriously complicated protocol, but you can't use any of these APIs without it. In this talk, we'll learn how OAuth works and why it's so complicated. We'll also use the Flask-Dance library to write a demo application that can authenticate with an API via OAuth. By the end, you'll be ready to tackle any OAuth API you want!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Baumgold</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/taming-oauth-with-flask-dance.html</guid><category>flask-dance</category><category>O-Auth</category><category>Flask</category><category>FlaskCon</category></item><item><title>useFlask() - or how to use a React frontend for your Flask app</title><link>/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel to write modern JS even when targeting older browsers and a Webpack+Babel build is very straightforward and allows for advanced preprocessing of JavaScript code. In this talk we'll even go one step further and not only use Webpack to build the assets, but also integrate a small demo Flask app with a React frontend where the Flask app only serves the static HTML page and uses a RESTful API to communicate with the React app. We'll also look into how to keep convenient Flask features such as URL building in client-side code (using the js-flask-urls package) and of course React hooks will be used!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Mönnich</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-05:flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</guid><category>ReactJs</category><category>Flask</category><category>FlaskCon</category></item><item><title>Demystifying Flask's Application and Request Contexts with pytest</title><link>/flaskcon-2020/demystifying-flasks-application-and-request-contexts-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The application and request contexts are key parts of any Flask application, as they control which variables are and are not globally accessible. Understanding how each context works is important when developing Flask applications, and yet they are often misunderstood. This talk dives into how the application and request contexts work when handling a request. The concept of proxies is discussed for providing thread-local access to the application and request contexts. To really illustrate how the application context works, pytest will be utilized to show how the application context works outside of a request. This example shows a common error ('Working outside of application context') during testing and how it should be solved by pushing to the application context stack.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Kennedy</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/demystifying-flasks-application-and-request-contexts-with-pytest.html</guid><category>flask context</category><category>Flask</category><category>FlaskCon</category></item><item><title>How Google Cloud uses Flask</title><link>/flaskcon-2020/how-google-cloud-uses-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how Google Cloud uses Flask, and how you can use Flask on Google Cloud. We'll talk about App Engine, Cloud Functions, and Cloud Run, as well as some new and interesting projects that combine Flask and Google Cloud together.
Dustin Ingram is a PSF director at the time of writing this.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/how-google-cloud-uses-flask.html</guid><category>Google Cloud</category><category>Flask</category><category>FlaskCon</category></item><item><title>How I built and maintained the first live online Python linter using Flask</title><link>/flaskcon-2020/how-i-built-and-maintained-the-first-live-online-python-linter-using-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the beginning of high school, I was lucky enough to stumble upon my first programming course which was in Python. Within a few weeks, I fell in love with the simplicity and power of using Python. After finishing the course, I wondered, “What else can I do with Python?” A few months later, I started programming my first web application in Python called PythonBuddy (&lt;a class="reference external" href="https://pythonbuddy.com"&gt;https://pythonbuddy.com&lt;/a&gt;/​) while doing research with Professor Eni Mustafaraj of Wellesley College. We were motivated to create this web app to help students jump right into programming without the burden of setting up a programming IDE. The first technology to create PythonBuddy was Flask. I was amazed at how simple and easy it was to set up basic web functionalities such as AJAX requests, templating, and testing. To this day, I still use Flask to set up web applications due to its simplicity and robustness. In this talk, I’ll walk through how I developed PythonBuddy using Flask and other places I’ve used Flask with.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan Chiu</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/how-i-built-and-maintained-the-first-live-online-python-linter-using-flask.html</guid><category>Python Buddy</category><category>Flask</category><category>FlaskCon</category></item><item><title>How the FEC uses Flask to increase transparency in US elections</title><link>/flaskcon-2020/how-the-fec-uses-flask-to-increase-transparency-in-us-elections.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How the US Federal Election Commission (FEC) uses Flask and other open source technology to power its campaign finance data API. The FEC collects and publishes data on federal candidates: who is running, how much they have raised, where that money is coming from, and how it's spent. This presentation will cover how we use Flask, Flask-SQLAlchemy, and Postgres to respond to nearly a million requests per day to query our four terabyte campaign finance database.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laura Beaufort</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/how-the-fec-uses-flask-to-increase-transparency-in-us-elections.html</guid><category>Posgres</category><category>FEC</category><category>Flask</category><category>FlaskCon</category></item><item><title>Just a bit more?</title><link>/flaskcon-2020/just-a-bit-more.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Flask is just awesome! It does what it does best&amp;quot; I heard these words from a colleague of mine a while ago. And I couldn't agree more. Flask is great. It's my to go to web framework when developing web applications. It doesn't pack too much but it's easily scalable. Let's be honest though, aren't there times where you just thought &amp;quot;if only it could do this..&amp;quot; or &amp;quot;I wish it supported ...&amp;quot;? For this session, we are going to go through Flask's testing support feature. We are going to see what it offers out of the box. We are going to cover some of it's downsides. Finally, we are going to cover a couple of enhancements one can add to make testing smoother and more fun :)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Bukachi</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/just-a-bit-more.html</guid><category>Flask</category><category>FlaskCon</category></item><item><title>Lessons Learned Building Microservices with Flask</title><link>/flaskcon-2020/lessons-learned-building-microservices-with-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn why we choose Flask at ScholarPack to handle millions of requests per day across dozens of microservices. I'll share my experiences building Flask microservices, and how the vast array of Pallets tools available can help you get up and running fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Coburn</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/lessons-learned-building-microservices-with-flask.html</guid><category>Microservices</category><category>Flask</category><category>FlaskCon</category></item><item><title>OpenPatch an Example for Building Microservices with Flask</title><link>/flaskcon-2020/openpatch-an-example-for-building-microservices-with-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenPatch is an open platform for assessment and training of programming skills. It is currently driven by twelve microservices. The frontend microservice is implemented in React. Most backend microservices are implemented in Flask. In this session the challenges and solutions of building a microservice architecture for OpenPatch with Flask will be presented. It will be shown how authentication with JWT via a centralized authentification service is implemented, how communication between the microservices with RabbitMQ is integrated, how versioning of microservices (api-endpoints and database-schemas) is used to keep backward-compatibility and what means are set up to ease the development of new microservices. This session should provide insights in the development of a microservice architecture with Flask, which could help others developers to implement their own or to spark the discussion of best practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Barkmin</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/openpatch-an-example-for-building-microservices-with-flask.html</guid><category>OpenPatch</category><category>Flask</category><category>FlaskCon</category></item><item><title>Securing Flask Web Applications with JWT and CSRF tokens</title><link>/flaskcon-2020/securing-flask-web-applications-with-jwt-and-csrf-tokens.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build secure web applications using the flask framework. At the end of the talk, the audience should know what CSRF tokens and Cross-site request forgery attacks are and how to prevent them in their next web application, and should be educated on how to use Json Web Tokens (JWT) to securely transfer data over API requests and the consequences of not doing this well. Web security is not a thing taught by default in tutorials, and this ends up raising a generation of web developers building applications that are vulnerable to attacks taught to cyber security personnel in HACKER 101 courses. A lot of vulnerabilities exist in web apps we use and build everyday and when triggered can lead to destruction of businesses and loss of tons of money. Trust me, I’ve had experience with this and it’s not funny. The talk is aimed at the intermediate python developer who has experience using the flask framework to build web applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Solomon Esenyi</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/securing-flask-web-applications-with-jwt-and-csrf-tokens.html</guid><category>JWT</category><category>Flask</category><category>FlaskCon</category></item><item><title>The Application Factory Architecture</title><link>/flaskcon-2020/the-application-factory-architecture.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruno Rocha (&amp;#64;rochacbruno) talks about how Flask encourages Application Factory Pattern for creating new application instances. Years ago I decided to leverage this pattern and use a wide application factory to build the whole Flask project. Using this approach we get rid of Circular import and app-out-of-context problems and also we have a better organization for our folder structure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Rocha</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/the-application-factory-architecture.html</guid><category>Application Factory</category><category>Flask</category><category>FlaskCon</category></item><item><title>Using Flask-RESTy to build flexible REST APIs, fast!</title><link>/flaskcon-2020/using-flask-resty-to-build-flexible-rest-apis-fast.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk presents Flask-RESTy, a modular library for building REST APIs using Flask along with SQLAlchemy and marshmallow. Flask-RESTy provides a flexible API with multiple levels of abstraction, ranging from high-level helpers that allow building CRUD APIs in just a few lines of code, to lower-level helpers that allow implementing highly customized business logic while preserving consistent authorization and validation logic. Through the use of these different elements of the library built on top of each other, developers can both implement complex endpoints in a consistent way and quickly spin up more conventional endpoints.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jimmy Jia</dc:creator><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-04:flaskcon-2020/using-flask-resty-to-build-flexible-rest-apis-fast.html</guid><category>Flask-resty</category><category>Flask</category><category>FlaskCon</category></item><item><title>Creatorlist Presentation With Abishek Kaushik</title><link>/flaskcon-2020/creatorlist-presentation-with-abishek-kaushik.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abishek discovered Flask on a summer internship, and then Creatorlist (&lt;a class="reference external" href="https://creatorlist"&gt;https://creatorlist&lt;/a&gt;.tech​) was born. He shares his journey of how he learnt Flask from scratch and the resources used. While building the platform, how he set up his implementation criteria, server setup and the use of Miguel’s built SocketIO to make the website.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abishek Kaushik</dc:creator><pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-03:flaskcon-2020/creatorlist-presentation-with-abishek-kaushik.html</guid><category>SocketIO</category><category>Flask</category><category>FlaskCon</category></item><item><title>D-Tale presentation with Andrew Schonfeld</title><link>/flaskcon-2020/d-tale-presentation-with-andrew-schonfeld.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Full-stack web developer for the last 15 years (of which 7 using Flask), Andrew talks about D-Tale (&lt;a class="reference external" href="https://github.com/man-group"&gt;https://github.com/man-group&lt;/a&gt;/dtale​) an OS project which gives users the ability to visualise most Pandas data structures from python console, Jupyter notebook or CLI. It does so by spinning up a small Flask process with minimal jinja templating, Plotly Dash, and a custom React front-end. It can demo the vast functionality available, all the different ways you can access it and dive deeper into how Flask really anchors the whole thing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Schonfeld</dc:creator><pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-03:flaskcon-2020/d-tale-presentation-with-andrew-schonfeld.html</guid><category>D-Tale</category><category>Flask</category><category>FlaskCon</category></item><item><title>A Web App in Four Frameworks</title><link>/pycascades-2018/a-web-app-in-four-frameworks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we take a tour of some Python web frameworks through the lens of an API for the same web application: a simple To Do list. We'll see how the same problems are handled across Django, Flask, Pyramid, and Tornado, and why you might choose one over the rest.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Hunt-Walker</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-01-22:pycascades-2018/a-web-app-in-four-frameworks.html</guid><category>framework</category><category>Django</category><category>Flask</category><category>Pyramid</category><category>Tornado</category></item><item><title>Fifty shades of docker</title><link>/pycon-es-2014/fifty-shades-of-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El workshop intentara explicar como montar una application hecha en Flask que usa un cluster de Cassandra (o mongo o redis... la base de datos da un poco igual) como backend y tiene servicios anyadidos como podria ser un buscador (ES)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Pedrazas</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-04-06:pycon-es-2014/fifty-shades-of-docker.html</guid><category>workshop</category><category>flask</category><category>cassandra</category></item><item><title>Flask vs Django</title><link>/pycon-es-2017/flask-vs-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask or Django? Which one is better? We know the answer: it depends!
In RavenPack, we use both frameworks in big projects and for that, we have been dealing with its strengths and weaknesses in a real-world environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dario Varotto</dc:creator><pubDate>Sun, 24 Sep 2017 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:,2017-09-24:pycon-es-2017/flask-vs-django.html</guid><category>flask</category><category>django</category></item><item><title>Fun with WebSocket and Flask</title><link>/pycon-ireland-2017/fun-with-websocket-and-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;WebSocket enables a web server to establish dedicated connections with clients, on which raw data can flow at any time and in any direction, free of the request/response cycle and the &amp;quot;chattiness&amp;quot; of the HTTP protocol. Paired with a high-level protocol such as Socket.IO, you get a powerful and easy to use framework for bi-directional, low latency communication, with clients available for Python, JavaScript, Java, iOS, Android, C++, .Net and more. Flask is a lightweight and very popular web framework for Python that makes writing web servers easy and fun, without sacrificing any power. What happens when you combine WebSocket, Socket.IO and Flask? In this talk I'm going to show you some of the cool applications that you can build when these technologies are put to work together, including streaming audio and video, real-time sensor data, automatic voting and more!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-10-21:pycon-ireland-2017/fun-with-websocket-and-flask.html</guid><category>webSocket</category><category>flask</category></item><item><title>Powering up your Python web applications</title><link>/pycon-ireland-2018/powering-up-your-python-web-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;App structure best practices: Benefits of using the Flask application factory. Creating a (Flask-Script) migrate.py to handle database connections. Easily move between production and development environments and database connections. Separating your app into Blueprints, to create webpage, API and logged in routes. Adding asynchronous tasks: Focusing on a real world application use case, using Redis as a message broker and Celery as an asynchronous task queue. Setting up your server connection and creating asynchronous and scheduled tasks. Adding in a JavaScript frontend: Adding a React JavaScript front end. Creating API endpoints that return JSON data. How to anchor our server rendered content to our React components and fetching data from out API. Pro's and cons of using react. Using jQuery as an alternative to React.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allyn Hunt</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-11-10:pycon-ireland-2018/powering-up-your-python-web-applications.html</guid><category>flask</category><category>jquery</category></item><item><title>GraphQL in Python</title><link>/pycon-italia-2018/graphql-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk si parlerà di GraphQL, un “data query language” creato da
Facebook come alternativa al famoso REST. Verrano elencate la varie
differenze e i vantaggi/svantaggi rispetto ad una tradizionale API REST.&lt;/p&gt;
&lt;p&gt;Verrà inoltre mostrato come utilizzare GraphQL con Python con un piccolo
approfondimento su come utilizzarlo con Django. In caso ci sia
abbastanza tempo, verrano elencate anche alcune informazioni avanzate,
come Authentication, Caching, Security e Realtime.&lt;/p&gt;
&lt;p&gt;Takeaway: l’obiettivo del talk è di dare una prima occhiata a GraphQL,
dando alcuni input su perché usarlo e sopratutto come iniziare ad usarlo
in Python con e senza Django.&lt;/p&gt;
&lt;p&gt;Audience: il talk è rivolto a sviluppatori web con un po’ di esperienza
di API web.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Guido Arminio</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-21:pycon-italia-2018/graphql-in-python.html</guid><category>flask</category><category>web</category><category>graphql</category><category>REST</category><category>django</category></item><item><title>Monitora le performance della tua applicazione Python Flask con Elasticsearch e Kibana</title><link>/pycon-italia-2018/monitora-le-performance-della-tua-applicazione-python-flask-con-elasticsearch-e-kibana.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Elasticsearch 6.1 una nuova funzionalità è stata aggiunta: APM
(Application Performance Monitoring).&lt;/p&gt;
&lt;p&gt;È possibile monitorare diverse metriche delle nostre applicazioni da
end-to- end monitoring, logging, server-level, application-level metrics
a end-user- experience monitoring. Tutte le metriche vengono
automaticamente indicizzate in Elasticsearch e sono facilmente
visualizzabili in Kibana con una dashboard ad-hoc.&lt;/p&gt;
&lt;p&gt;Nel talk vedremo come monitorare le performance di un’applicazione
Python Flask, indicizzare le metriche in Elasticsearch e visualizzarle
con una dashboard Kibana. Con poche righe di codice è possibile
monitorare le applicazioni già esistenti oppure catturare messaggi
generici ed eccezioni.&lt;/p&gt;
&lt;p&gt;Se volete sfruttare a pieno le potenzialità di Elasticsearch e Kibana
(non solo per i log!), utilizzate il framework Flask e cercate una
soluzione di APM gratuita, questo talk fa per voi.&lt;/p&gt;
&lt;p&gt;Si richiede una conoscenza base di Elasticsearch (l’installazione e
configurazione base non saranno oggetto del talk) e del framework Flask.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 17:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Zuccon</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-20:pycon-italia-2018/monitora-le-performance-della-tua-applicazione-python-flask-con-elasticsearch-e-kibana.html</guid><category>flask</category><category>performance</category><category>elasticsearch</category></item><item><title>Porting your Python web app to serverless in 30 minutes</title><link>/pycon-italia-2019/porting-your-python-web-app-to-serverless-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This live-coding session will guide you through the process of migrating
an existing Flask application to AWS Lambda.&lt;/p&gt;
&lt;p&gt;We will analyze the existing application, decompose it into individual
microservices, adapt authentication, frontend, tests, and data model,
and finally deploy it to the Cloud.&lt;/p&gt;
&lt;p&gt;Throughout this step-by-step process, you will learn the benefits of
serverless and how it will change the way you think of scalability,
availability, security, infrastructure management, and cost
optimization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1620"&gt;https://python.it/feedback-1620&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 10:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Casalboni</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-05-03:pycon-italia-2019/porting-your-python-web-app-to-serverless-in-30-minutes.html</guid><category>serverless</category><category>web</category><category>flask</category><category>aws</category><category>live-coding</category><category>cloud</category></item><item><title>Webフレームワークパネル</title><link>/pycon-japan-2012/webhuremuwakupaneru.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;去年好評だったパネルディスカッションを今年も行います。
今年はFlaskの作者であり基調講演を行うArmin Ronacherを初めとした各フレームワークの第一人者を迎え、 Flask, Django, Pyramid, Google App Engine の利点と欠点を赤裸々に討論して頂きます。
この討論を聴いて頂ければ、状況に応じたwebフレームワークの選択が出来るようになるはずです。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yoshifumi Yamaguchi</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2012-09-16:pycon-japan-2012/webhuremuwakupaneru.html</guid><category>panel</category><category>framework</category><category>flask</category><category>django</category><category>pyramid</category><category>googleappengine</category></item><item><title>Turn your Flask App into Async using Quart</title><link>/pycon-philippines-2019/turn-your-flask-app-into-async-using-quart.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you already use our beloved micro-framework Flask but have a problem with the speed and scalability? We hear a lot of buzz with the new fancy asynchronous Python programming using async/await keyword to make our Python code run faster. But really how async works are still not spread well and the majority of Python programmer still not familiar using async/await keyword. In this talks, because Flask is not intended to support async (yet), we are will explore Quart, the Python ASGI web microframework. It is intended to provide the easiest way to use asyncio functionality in a web context, especially with existing Flask apps. This is possible as the Quart API is a superset of the Flask API. So you can instantly migrate your Flask app easily!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Doni Rubiagatra</dc:creator><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-02-23:pycon-philippines-2019/turn-your-flask-app-into-async-using-quart.html</guid><category>quart</category><category>flask</category><category>async</category></item><item><title>Opening the Flask</title><link>/pycon-us-2011/pycon-2011--opening-the-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Opening the Flask&lt;/p&gt;
&lt;p&gt;Presented by Armin Ronacher&lt;/p&gt;
&lt;p&gt;After a year of the Flask microframework it's time to draw some
conclusions, see things that went right and things that should be
improved. The talk gives both an introduction into Flask itself as well
as well as the ecosystem that evolved around it.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Flask is a microframework that was born out of an April's fool joke that
quickly became more than that. Based on the powerful foundation of
Werkzeug and Jinja2 it's one of the most popular frameworks for Python
now.&lt;/p&gt;
&lt;p&gt;The talk starts with a very quick introduction into Flask, where it all
started and why I think people like it. We will look into the design of
Flask and why it works the way it works.&lt;/p&gt;
&lt;p&gt;Furthermore we will look into the Flask ecosystem and how extensions
work and have a brief look in what is planned for the future, especially
regarding Python 3.&lt;/p&gt;
&lt;p&gt;The talk assumes basic knowledge of web applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2011-03-11:pycon-us-2011/pycon-2011--opening-the-flask.html</guid><category>flask</category><category>pycon</category><category>pycon2011</category></item><item><title>It's Raining, It's Pouring? A web and SMS application in Flask and Twilio to call Farmers.</title><link>/pygotham-2016/its-raining-its-pouring-a-web-and-sms-application-in-flask-and-twilio-to-call-farmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about the use of python in building a web application with which we call farmers in less developed countries to capture rainfall occurrence. These data are used to complement lower resolution satellite data, and to potentially update climate models. The application is built in Flask and uses Twilio's API to deliver voicemails to farmers in less developed countries. Twilio's API records farmers' touch tone responses regarding the occurrence of rainfall.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katya Vasilaky</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-16:pygotham-2016/its-raining-its-pouring-a-web-and-sms-application-in-flask-and-twilio-to-call-farmers.html</guid><category>flask</category></item><item><title>PyOhio 2011: Django and Google App Engine: Why I'm using Flask and Amazon EC2</title><link>/pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and Google App Engine: Why I'm Using Flask and Amazon EC2&lt;/p&gt;
&lt;p&gt;Presented by Ben Rousch&lt;/p&gt;
&lt;p&gt;I'm a lazy coder, but not the good kind of lazy. I dove into Django so I
could have one web framework that would work on many kind of hosting
setups and for any kind of web project. With some modifications, I could
even use the laziest application host, Google App Engine. Some of these
decisions didn't work out, so I'll share some of the lessons I've
learned the past year or so.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Rousch</dc:creator><pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2011-07-30:pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html</guid><category>ec2</category><category>flask</category><category>gae</category><category>googleappengine</category><category>pyohio</category><category>pyohio2011</category></item><item><title>Python web frameworks shootout</title><link>/python-frederick/python-web-frameworks-shootout.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the October 2017 Python Frederick meetup, we looked at API Star, Falcon, Flask, Django, and Pyramid and did a comparison of their features to see which would be the best fit for your future web project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-10-11:python-frederick/python-web-frameworks-shootout.html</guid><category>api star</category><category>falcon</category><category>flask</category><category>django</category><category>pyramid</category></item></channel></rss>