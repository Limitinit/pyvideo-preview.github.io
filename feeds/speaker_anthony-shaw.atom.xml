<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_anthony-shaw.atom.xml" rel="self"></link><id>/</id><updated>2021-05-14T00:00:00+00:00</updated><entry><title>How to write a container daemon in Python</title><link href="/pycon-au-2017/how-to-write-a-container-daemon-in-python.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:,2017-08-05:pycon-au-2017/how-to-write-a-container-daemon-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When the authors of Docker first started, they wrote the Docker daemon in Python. This was later switching for Go, but why? This talk will cover mocker, a container runtime Anthony wrote to understand Docker by rewriting its basic functions in 100% Python. Anthony will walk through how to write a Docker daemon in Python whilst applying it to real problems. Whilst the tool might not be production ready, it demonstrates some patterns, libraries and ideas for working with Docker containers from Python.&lt;/p&gt;
</summary></entry><entry><title>Wily Python: Writing simpler and more maintainable Python</title><link href="/pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html" rel="alternate"></link><published>2019-05-03T14:35:00+00:00</published><updated>2019-05-03T14:35:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:,2019-05-03:pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone starts with the best intentions with their Python projects,
&amp;quot;this time it's going to be clean, simple and maintainable&amp;quot;. But code
evolves over time, requirements change and codebases can get messy and
complicated quickly.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how to use &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; to measure and graph
how complicated your Python code is and a series of practical techniques
to simplify it. &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; will show you which parts of your projects are
becoming or have become hard to maintain and need a refactor. Once you
know where the skeletons are, you will learn practical techniques for
refactoring &amp;quot;complex&amp;quot; code and some resources to use to take your
refactoring to the next level.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Why is Python slow?</title><link href="/pycon-us-2020/why-is-python-slow.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:,2020-04-17:pycon-us-2020/why-is-python-slow.html</id><summary type="html"></summary></entry><entry><title>Microsoft sponsor workshop</title><link href="/pycon-us-2021/microsoft-sponsor-workshop.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:,2021-05-14:pycon-us-2021/microsoft-sponsor-workshop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this workshop, we will talk through scalable Django architecture and how Azure services like load balancing, sharded databases, and functions can be used to scale a Django application from a few to lots of users.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://aka.ms/pycon-django-workshop"&gt;https://aka.ms/pycon-django-workshop&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Restarting Pyjion, a general purpose JIT for Python- is it worth it?</title><link href="/pycon-us-2021/restarting-pyjion-a-general-purpose-jit-for-python-is-it-worth-it.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:,2021-05-14:pycon-us-2021/restarting-pyjion-a-general-purpose-jit-for-python-is-it-worth-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk you'll see an update to the Pyjion project, a JIT compiler for CPython byte-code. This project was started 5 years ago but stopped after making no gains in performance. Recent changes to CPython have made optimisations more viable, so now it has been restarted and is showing big performance gains vs. standard CPython with 100% compatibility. Many attempts have been made to build a general purpose JIT for Python and few have succeeded. Is it worth it and what are the gains to be made? This talk will cover the design ideas of a JIT for CPython, optimisations, and future potential.&lt;/p&gt;
&lt;p&gt;Website: &lt;a class="reference external" href="https://pyjion.readthedocs.io"&gt;https://pyjion.readthedocs.io&lt;/a&gt;
Source code: &lt;a class="reference external" href="https://GitHub.com/tonybaloney/pyjion"&gt;https://GitHub.com/tonybaloney/pyjion&lt;/a&gt;
Book: &lt;a class="reference external" href="https://realpython.com/products/cpython-internals-book/"&gt;https://realpython.com/products/cpython-internals-book/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>