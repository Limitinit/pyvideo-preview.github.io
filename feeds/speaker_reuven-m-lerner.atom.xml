<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_reuven-m-lerner.atom.xml" rel="self"></link><id>/</id><updated>2021-05-14T00:00:00+00:00</updated><entry><title>Practical decorators</title><link href="/pycon-us-2019/practical-decorators.html" rel="alternate"></link><published>2019-05-03T10:50:00+00:00</published><updated>2019-05-03T10:50:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:,2019-05-03:pycon-us-2019/practical-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher level of abstraction, applying the same treatment to functions
and classes.&lt;/p&gt;
&lt;p&gt;But what can you actually do with them? For many Python developers I've
encountered, ecorators sometimes appear to be a solution looking for a
problem.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you some practical uses for decorators, and how
you can use them to make your code more readable and maintainable, while
also providing more semantic power. Moreover, you'll see examples of
things would be hard to do without decorators. I hope that after this
talk, you'll have a good sense of how to use decorators in your own
Python projects.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Function dissection lab -- learn how functions</title><link href="/pycon-us-2020/function-dissection-lab-learn-how-functions.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:,2020-04-17:pycon-us-2020/function-dissection-lab-learn-how-functions.html</id><summary type="html"></summary></entry><entry><title>When is an exception not an exception? Using warnings in Python</title><link href="/pycon-us-2021/when-is-an-exception-not-an-exception-using-warnings-in-python.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:,2021-05-14:pycon-us-2021/when-is-an-exception-not-an-exception-using-warnings-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If your code encounters a big problem, then you probably want to raise an exception. But what should your code do if it finds a small problem, one that shouldn't be ignored, but that doesn't merit an exception? Python's answer to this question is warnings.&lt;/p&gt;
&lt;p&gt;In this talk, I'll introduce Python's warnings, close cousins to exceptions but still distinct from them. We'll see how you can generate warnings, and what happens when you do. But then we'll dig deeper, looking at how you can filter and redirect warnings, telling Python which types of warnings you want to see, and which you want to hide. We'll also see how you can get truly fancy, turning some warnings into (potentially fatal) exceptions and handling certain types with custom callback functions.&lt;/p&gt;
&lt;p&gt;After this talk, you'll be able to take advantage of Python's warning system, letting your users know when something is wrong without having to choose between &amp;quot;print&amp;quot; and a full-blown exception.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/reuven/when-is-an-exception-not-an-exception-using-pythons-warnings"&gt;https://speakerdeck.com/reuven/when-is-an-exception-not-an-exception-using-pythons-warnings&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>