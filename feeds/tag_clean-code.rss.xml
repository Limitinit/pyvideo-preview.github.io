<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Code review for Beginners and Experts: Tips &amp; Tricks</title><link>/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much easier to debug, and it's much harder to introduce
a bug in such code.&lt;/div&gt;
&lt;div class="line"&gt;When you think about code review, you probably think about verifying
and examining the code. Reviewing the expert's code may look like a
waste of time because he knows what he's doing. Reviewing the code by
a beginner may look like a waste of time because he's not able to find
as many defects as an experienced developer. Code review is a code
quality tool in the first place, but it's also much beyond that. You
can teach or help someone, learn from somebody and much more both from
the position of reviewer and reviewee.&lt;/div&gt;
&lt;div class="line"&gt;There is much more about the real power of code review which I want to
share with you.&lt;/div&gt;
&lt;div class="line"&gt;This talk is also about how to do it the right way and how to not do
it based on lessons learned and my experience within the diverse teams
of people with a variety of knowledge and experience. I was reviewing
the code but, on the other hand, I was also being reviewed. I'd like
to pass my observations to people who are reviewing the code both in
commercial and open source projects for a while. This talk is also for
those who want to start to review the code, but they do not know how
to do it.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Kąkol</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-12:europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</guid><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Development</category><category>Programming</category></item><item><title>Don't start with a database</title><link>/europython-2019/dont-start-with-a-database.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What you do when you start a new project? Usually, we begin with
database design, then we prepare a migration system, user registration,
and all different stuff that distracts us from doing what is most
important - business logic. With the clean architecture, we can learn
how to start a project in another way and this will be one of two main
topics of my talk. The second one will be about new features in Python.
You probably heard about typings, mypy, and dataclasses, but I will show
you how they can be used in real life project that can be developed over
many years in production lifecycle. There will be no &amp;quot;hello world&amp;quot; app,
no copy &amp;amp; paste of documentation, only practical knowledge learned
through many years of practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grzegorz Kocjan</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-12:europython-2019/dont-start-with-a-database.html</guid><category>APIs</category><category>Abstractions</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category></item><item><title>How to read (code)</title><link>/europython-2019/how-to-read-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-12:europython-2019/how-to-read-code.html</guid><category>Beginners</category><category>Clean Code</category><category>Documentation</category><category>Learning</category><category>Teaching</category></item><item><title>Modern Continuous Delivery for Python Developers</title><link>/europython-2019/modern-continuous-delivery-for-python-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment automation, cloud platforms, containerization, short
iterations to develop and release software—we’ve progressed a lot. And
finally it’s official: Kubernetes and OpenShift are the established
platforms to help us do scaling and zero downtime deployments with just
a few hundred lines of YAML. It’s a great time.&lt;/p&gt;
&lt;p&gt;Can we finally put all our eggs into one basket? Identify the cloud
platform that fits our needs, and jump on it? That could well backfire:
Vendor lock-in is the new waterfall, it slows you down. In future you’ll
want to jump over to the next better platform, in a matter of minutes.
Not months.&lt;/p&gt;
&lt;p&gt;This talk is about The Art of Writing deployment pipelines that will
survive Kubernetes, OpenShift and the like. It’s for Python developers
and Kubernetes enthusiasts of all levels – no domain specific knowledge
required, all you need to understand will be explained. You’ll learn how
to separate application-specific and deployment-specific configuration
details, to maximize your freedom and avoid vendor lock-in.&lt;/p&gt;
&lt;p&gt;Come see a demo of a Django project setup that covers everything from
local development to automatic scaling, flexible enough to be deployed
on any of your favorite container platforms. Take home a working,
future-proof setup for your Python applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Bittner</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-12:europython-2019/modern-continuous-delivery-for-python-developers.html</guid><category>Agile</category><category>Best Practice</category><category>Clean Code</category><category>Deployment/Continuous Integration and Delivery</category></item><item><title>PEP yourself: 10 PEPs you should pay attention to</title><link>/europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reading standards documents can be a dull task. But like in other
fields, standards in Python play a big part. Python Enhancement
Proposals (PEPs) are defined, improved, and eventually implemented by
the community. They apply to mostly anything related to Python, from the
more abstract and general to the more concrete and specific. Paying
attention to them, and knowing which ones to read beforehand is a vital
task that should take place prior to writing the first lines of code in
a project.&lt;/p&gt;
&lt;p&gt;In this talk we will go over a condensed list of the most important PEPs
to this date and see how they influence everyday coding. From style
guides and docstring conventions to data classes and assignment
expressions, we will see how these PEPs affect (or can affect) the code
we write, and how can we use them to improve our code and make
developing easier and more fun.&lt;/p&gt;
&lt;p&gt;After this talk, attendees will have a better grasp on why PEPs are
important to Python, which are a must read, and which ones they should
use as a guide in the future, both for coding and refactoring.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Santos</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-12:europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</guid><category>Clean Code</category><category>Python Skills</category><category>Python general</category></item><item><title>From Python script to Open Source Project</title><link>/europython-2019/from-python-script-to-open-source-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Karzyński</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-11:europython-2019/from-python-script-to-open-source-project.html</guid><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Static Analysis</category><category>Tooling</category></item><item><title>Refactoring in Python</title><link>/europython-2019/refactoring-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[Replacement talk]&lt;/div&gt;
&lt;div class="line"&gt;This talk was a replacement for Stanislav Geidl's talk: From legacy
code to modern code&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Honest apologies to anyone whose expectations were subverted, but
Stanislav fell sick and could not attend. Find the updated abstract
below:&lt;/p&gt;
&lt;p&gt;This talk will describe experiences and lessons learned from tackling
extremely demanding code. How to bring order to mismanaged code and
elevate the code base to a standard that's acceptable in today's tech
environment.&lt;/p&gt;
&lt;p&gt;Python makes wonderful code accessible at our fingertips, but it also
allows us to take a lot of liberty. When you start, code is beautiful
and makes sense. With each step you walk on, you find more and more
hacks showing up. Eventually, the brilliant codebase you've started with
can not be seen under the mud.&lt;/p&gt;
&lt;p&gt;Not every code-base can be rewritten, not everything can be redone from
scratch. Cool libraries often take a lot of liberty with code structure
and make cross-integration difficult, if not impossible. Tests sound
ideal, but in practice, they're just so hard to make right. Why is this,
and how to change it?&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The talk will tackle the problems in three parts:&lt;/div&gt;
&lt;div class="line"&gt;- The Easy Wins: What to do to instantly increase the code quality in
your organisation. How? Why isn't it enough?&lt;/div&gt;
&lt;div class="line"&gt;- Patterns and Antipatterns: How to identify code that &amp;quot;smells&amp;quot;, how
to replace it? How to integrate into old code, better?&lt;/div&gt;
&lt;div class="line"&gt;- The Philosophy: What approach to set down for the future? Why to
care? How to write replace-able code. How to prevent history from
repeating.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The talk will close with audience discussion and experiences, questions
and proposals - building a collection of some on-premise tips and
tricks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tin Marković</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-11:europython-2019/refactoring-in-python.html</guid><category>Architecture</category><category>Clean Code</category><category>Development</category><category>Python 3</category><category>legacy-code</category></item><item><title>Can we deploy yet?</title><link>/europython-2020/can-we-deploy-yet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code production ready&lt;/p&gt;
&lt;p&gt;What happens when your features are done, your MVP is ready and you want to deploy your first production build? What do you do then? How do you make your first production build instead of re-using your development one? is your code ready to handle real user interactions?
This talk will show a production ready checklist for your Python code; what to look for when creating a production-ready Docker image; what are the differences between development and production environments and builds.
You will see how to deal with exceptions, logs, and metrics with real-world use cases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anastasiia Tymoshchuk</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/can-we-deploy-yet.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category><category>Development</category><category>Documentation</category></item><item><title>Clean Architectures in Python</title><link>/europython-2020/clean-architectures-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A practical approach to better software design&lt;/p&gt;
&lt;p&gt;Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software that cannot easily be maintained or changed.&lt;/p&gt;
&lt;p&gt;The “clean architecture” model predates Robert Martin, who recently brought it back to the attention of the community, and is a way of structuring applications that leverages layers separation and internal APIs to achieve a very tidy, fully-tested, and loosely coupled system. The talk introduces the main ideas of the architecture, showing how the layers can be implemented in Python, following the content of the book “Clean Architectures in Python”. The book recently reached 11,000 downloads and many readers found it useful to start learning how to test software and how to structure an application without relying entirely on the framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Giordani</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/clean-architectures-in-python.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Abstractions</category><category>Architecture</category><category>Clean Code</category><category>Development</category><category>TDD</category></item><item><title>Effective Code Reviews</title><link>/europython-2020/effective-code-reviews.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The edge between hard skills and soft skills&lt;/p&gt;
&lt;p&gt;Does your company uses code review? In this talk I will demonstrate why it should start using them immediately, share the many benefits and situations we've gone through, besides good practices that should be used for effective code reviews, that add quality to the product/service that is being delivered.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vinicius Gubiani Ferreira</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/effective-code-reviews.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Agile</category><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Communication</category></item><item><title>How to write multi-paradigm code</title><link>/europython-2020/how-to-write-multi-paradigm-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;... without making a mess&lt;/p&gt;
&lt;p&gt;Python is a powerful multi-paradigm language which combines elements of object-orientation and functional programming. Both concepts can be really powerful if used right. But what if you use them together? It can be pragmatic and very efficient, but things can also get messy really quickly.&lt;/p&gt;
&lt;p&gt;This talk explores peaceful co-existence of oo-classes and pure functions in the same code base. The focus is on identifying the right tool for the right job and bringing together the best of both. The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code Structure&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;State Handling&lt;/li&gt;
&lt;li&gt;Multiple implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:
There are no formal prerequisites for this course, although it is recommended that participants have a strong background in Python and its code structuring mechanisms, as well as a deep understanding of at least one of the paradigms of OOP and FP.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Mistler</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/how-to-write-multi-paradigm-code.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Abstractions</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category><category>Functional Programming</category></item><item><title>Social distancing from your system’s dependencies: An API’s Story</title><link>/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot of ugly tests.&lt;/p&gt;
&lt;p&gt;We soon realized our tests required more care and they invoked some difficult questions. Is it possible that the limitations of the testing framework add or give away flaws on your design? Should your architecture be affected by your efforts to test the system? What did we learn in the process?&lt;/p&gt;
&lt;p&gt;This presentation will introduce some testing isolation concepts and discuss how the choice of each can affect your architecture design. We will go through the basics of the unittest.mock library and the pytest framework and explore their potential. By diving into scenarios, attendees will learn where these features can be applied more effectively, and more importantly, how an API design can and should be driven by the value of testability, allowing the tests to be structured around clarity, readability and a happy Continuous Integration platform.&lt;/p&gt;
&lt;p&gt;The target audience includes beginner Pythonistas, who are looking for ways to structure and test their code cleanly, while intermediate developers will enjoy a fun refreshment on dependency isolation and leave the session with practical examples on how to use it more effectively.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olga Matoula</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Clean Code</category><category>System Architecture</category><category>TDD</category><category>Test Libraries (pytest/nose/...)</category><category>Testing</category></item><item><title>The joy of deleting code</title><link>/europython-2020/the-joy-of-deleting-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to apply YAGNI to practice&lt;/p&gt;
&lt;p&gt;They say measuring code quality by its LOC is like measuring aircraft quality by its weight. There's a lot of sense in the metaphor, as we often call inefficient code with words like &amp;quot;heavy&amp;quot; or &amp;quot;bloated&amp;quot;.
In my talk I'll tell you about my approach to deleting unneeded code, tools that could help you and how did it turned out in the end in real world projects.
As you probably know, detecting unused code automatically is a hard task and doing it in Python is exceptionally hard because we sometimes call methods with getattr or write classes which are only used in non-python configuration files. Tools give us only a partial success. What you could do beyond them? What approach to take? I'd like to discuss it in detail in my talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radosław Ganczarek</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/the-joy-of-deleting-code.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Programming</category></item><item><title>Writing Clean Abstractions</title><link>/europython-2020/writing-clean-abstractions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstractions make things appear simple. This is one of the main concepts behind OOP. So what is it?! This talk will provide some guidelines on how to build abstractions that are extendable and scalable.&lt;/p&gt;
&lt;p&gt;I will start by bringing audience on same page, I will explain what are abstractions in programming with some examples, I will also compare what are strong and weak abstractions and also give some examples. Later on I will talk a bit about leaky abstractions and provide some examples.&lt;/p&gt;
&lt;p&gt;After brining audience to the same page I would switch focus to actual topic by talking about how bad abstractions are formed and then have a quick interactive session where I will show audience some interfaces and ask them to tell which abstraction is better and also bitch about the wrong things in the bad ones. After having good understanding of what makes abstractions bad, I would explain you various design pattern by doing post mortem of the python redis client. Lastly if you have any questions I would be happy to answer them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Smit Thakkar</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/writing-clean-abstractions.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Clean Code</category></item><item><title>Writing Zenlike Python</title><link>/europython-2020/writing-zenlike-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are going on about?&lt;/p&gt;
&lt;p&gt;Most of us are familiar with the &amp;quot;Zen of Python&amp;quot;, Tim Peters's legendary, if tongue-in-cheek, set of guiding principles for the Python language. But can they actually inform Pythonic code?&lt;/p&gt;
&lt;p&gt;In this talk, Jason C. McDonald will unpack how the twenty principles (including the unwritten rule) of the Zen can guide you to write beautiful, maintainable code, by treating Python AS Python!&lt;/p&gt;
&lt;p&gt;This talk is intended primarily for developers who have come to Python from another language, no matter their experience level. McDonald will shed light on how to work WITH Python's type system, statements, and iterative tools, rather than against them. You'll walk away with a new appreciation of the language, and an understanding of what Pythonic really means; an understanding which will empower you to find the One Obvious Way to solve any problem in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason McDonald</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/writing-zenlike-python.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Clean Code</category><category>Python 3</category><category>Python general</category><category>The Answer to Life the Universe and Everything Else</category></item></channel></rss>