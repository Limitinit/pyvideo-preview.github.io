<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_bernat-gabor.atom.xml" rel="self"></link><id>/</id><updated>2021-05-14T00:00:00+00:00</updated><entry><title>Standardize Testing in Python</title><link href="/europython-2018/standardize-testing-in-python.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:,2018-07-26:europython-2018/standardize-testing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, Bernat will introduce tox, an open source tool with the
bold vision of standardizing testing. From a CIs point of view, testing
contains much more than just unit and/or integration tests; other things
like code style checks, packaging, testing under various versions of
Python, and checking that documentation still generates, are just as
important. Things quickly start to spiral out of control once you add
into the mix that there are many tools and ways to accomplish each of
these tasks. In this talk, we will learn how tox tries to abstract away
all this complexity, how to easily run CI tests on your local machine,
and how one can use this tool inside your CI frameworks to ensure high
quality and easily maintainable packages.&lt;/p&gt;
</summary></entry><entry><title>status quo of virtual environments</title><link href="/europython-2019/status-quo-of-virtual-environments.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:,2019-07-12:europython-2019/status-quo-of-virtual-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the project maintainers); also, to find out if
the good old virtualenv project has any place left, now that Python 3.4+
contains venv.&lt;/p&gt;
&lt;p&gt;This talk is aimed to be a bit more technical in its first parts,
presenting in technical details what a virtualenv is. The target
audience is anyone who used virtual environments and wants to understand
how they tick from within. I’ll also emphasise diversity and inclusion
at Python interpreter level by highlighting other interpreters than
CPython: Jython, PyPy or Iron Python. A concise outline goes as follows:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;What is a virtual environment?&lt;/div&gt;
&lt;div class="line"&gt;- why we need it&lt;/div&gt;
&lt;div class="line"&gt;- what we use it for&lt;/div&gt;
&lt;div class="line"&gt;- demo - virtualenv vs system env&lt;/div&gt;
&lt;div class="line"&gt;How do we build a virtual environment (CPython)&lt;/div&gt;
&lt;div class="line"&gt;- technical workflow of venv creation&lt;/div&gt;
&lt;div class="line"&gt;- activation&lt;/div&gt;
&lt;div class="line"&gt;-- bash&lt;/div&gt;
&lt;div class="line"&gt;-- powershell&lt;/div&gt;
&lt;div class="line"&gt;-- cmd.bat&lt;/div&gt;
&lt;div class="line"&gt;Other interpreters&lt;/div&gt;
&lt;div class="line"&gt;- why other than CPython?&lt;/div&gt;
&lt;div class="line"&gt;- PyPy&lt;/div&gt;
&lt;div class="line"&gt;- Jython&lt;/div&gt;
&lt;div class="line"&gt;- virtualenv&lt;/div&gt;
&lt;div class="line"&gt;- all Python support&lt;/div&gt;
&lt;div class="line"&gt;- extra activation -&amp;gt; xonosh&lt;/div&gt;
&lt;div class="line"&gt;Summary and q/a&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Virtual Env"></category></entry><entry><title>Lessons from the Trenches: rewriting and re-releasing virtualenv</title><link href="/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:,2020-07-23:europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining this project became increasingly more troublesome, to the point where, we had more than 500 open issues at one point. In July 2019, I started working from scratch on a rewrite, with the goal of not just increasing the project's maintainability, but also to make it faster and add some new features that were just impossible or too hard to do in the existing code base. Fast forward six months to January 2020, when we released the first beta, with the first full release coming out on 10th February. It took a bit more than a month to squash all the open bugs tickets, but April started without any remaining open bug tickets. This talk will cover the lessons I've learned while on this journey.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Packaging"></category><category term="Virtual Env"></category><category term="python"></category></entry><entry><title>Type hinting (and mypy)</title><link href="/pycon-us-2019/type-hinting-and-mypy.html" rel="alternate"></link><published>2019-05-04T14:35:00+00:00</published><updated>2019-05-04T14:35:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:,2019-05-04:pycon-us-2019/type-hinting-and-mypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type hinting for Python (as a linter tool) came out in September 2015 as
part of Python 3.5 (and was championed by Guido himself). Since then,
variable annotations (plus, more recently, protocols) improved its
capabilities even further. Over the last two years, tools, such as mypy,
could build on top of it. Slowly, these annotations have emerged from a
proof of concept state (e.g., mypy API planning) to becoming a stable
feature.&lt;/p&gt;
&lt;p&gt;In this presentation, I'll tell my story of using type hints for both
adding type hinting and checking type correctness for a library
supporting both Python 2 and 3 and reusing this information to insert
type data into the generated Sphinx documentation automatically.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Lightning Talks 1</title><link href="/pycon-us-2021/lightning-talks-1.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:,2021-05-14:pycon-us-2021/lightning-talks-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;André Roberge - Friendlier tracebacks&lt;/p&gt;
&lt;p&gt;Bernat Gabor - tox 4 is happening!&lt;/p&gt;
&lt;p&gt;Brett Cannon - Introducing the Python Launcher for Unix&lt;/p&gt;
&lt;p&gt;Cheuk Ho - What happens when the developer decided that your name is too short&lt;/p&gt;
&lt;p&gt;Deepa - A tale of mutability and recursion&lt;/p&gt;
&lt;p&gt;Jason C. McDonald - Code Review For Great Good&lt;/p&gt;
&lt;p&gt;Jürgen Gmach - How to Maintain Many, Many, Many, Many... Many Git Repositories?&lt;/p&gt;
&lt;p&gt;Mfon Eti-mfon - Queer Struggles in Africa: Fighting Hate With Python&lt;/p&gt;
&lt;p&gt;Phil Jones - What’s new in Flask&lt;/p&gt;
&lt;p&gt;Clint Cameron - How to take ownership of security in your Python code&lt;/p&gt;
&lt;p&gt;Daniel J. Dufour - Load Django Settings from Environmental Variables with One Magical Line of Code&lt;/p&gt;
</summary></entry><entry><title>Python Packaging Demystified</title><link href="/pycon-us-2021/python-packaging-demystified.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Bernát Gabor</name></author><id>tag:,2021-05-14:pycon-us-2021/python-packaging-demystified.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most developers, Python packaging feels like a magical (and cryptic) black box. Apps and libraries use a variety of tools and have different packaging challenges. Once you start reading up on this topic, you come across many seemingly random components: setuptools, pip, poetry, wheels, pyproject.toml, MANIFEST.in, virtual environments, zippapp, shiv, pex, and so on. The sheer number of concepts to master can be overwhelming, leading many programmers to conclude that packaging in Python is a mess. Before you despair, join me in this tutorial session where you'll have a chance to learn how to package and publish/deploy your library and/or application through hands-on exercises.&lt;/p&gt;
&lt;p&gt;Topics include:&lt;/p&gt;
&lt;p&gt;How and why library packaging differs from application packaging
Differences between a source tree/source distribution/wheel
Differences between a build back-end and a build front-end (and why we even have this separation)
Tools used for packaging your library
Tools and techniques used to package your application
Testing your package for correctness&lt;/p&gt;
</summary></entry><entry><title>Type hints inside the snake pit</title><link href="/pylondinium-2018/type-hints-inside-the-snake-pit.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:,2018-06-09:pylondinium-2018/type-hints-inside-the-snake-pit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to re-use type hints for much more than just type checking.&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry></feed>