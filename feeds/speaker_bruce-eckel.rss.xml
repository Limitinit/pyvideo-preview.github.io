<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Sat, 18 Feb 2017 00:00:00 +0000</lastBuildDate><item><title>Bruce Eckel - Keynote</title><link>/pycaribbean-2017/bruce-eckel-keynote.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Eckel</dc:creator><pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-02-18:pycaribbean-2017/bruce-eckel-keynote.html</guid></item><item><title>Rethinking Errors: Learning from Scala and Go</title><link>/pycon-us-2013/rethinking-errors-learning-from-scala-and-go.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;C++ brought exceptions to mainstream programming; Java goes further with
checked exceptions. But are exceptions the one way to report all errors?
Scala and Go suggest there is more than one kind of error, so there
should be more than one kind of error reporting, and different responses
to errors. Iâ€™ll show the Scala and Go approaches to the error problem,
and how to apply this to Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Eckel</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-03-15:pycon-us-2013/rethinking-errors-learning-from-scala-and-go.html</guid><category>talk</category></item></channel></rss>