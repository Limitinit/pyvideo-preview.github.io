<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Sat, 02 Oct 2021 00:00:00 +0000</lastBuildDate><item><title>How Decorators Function</title><link>/pycon-india-2020/how-decorators-function.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-10-02:pycon-india-2020/how-decorators-function.html</guid></item><item><title>Beyond Unit Tests End to End Web UI Testing – Andrew Knight (PyCon Taiwan 2021)</title><link>/pycon-taiwan-2021/beyond-unit-tests-end-to-end-web-ui-testing-andrew-knight-pycon-taiwan-2021.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, 11:35-12:05&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Unit tests are great, but they don’t catch all bugs because they don’t test features like a user. However, Web UI tests are complicated and notoriously unreliable. So, how can we write tests well? Never fear! Let’s learn how to write robust, scalable Web UI tests using Python, pytest, and Selenium WebDriver that cover the full stack for any Web app. In this talk, we will write one simple test together that covers DuckDuckGo searching. You’ll learn how to write battle-hardened Web UI tests for any Web app, including Django and Flask apps. I’ll also provide plenty of hands-on tutorials and resources to continue learning after this talk.&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Web UI testing is difficult because many folks don't know how to do it, or they aren't experienced in how to handle fine details like locators or race conditions. In this talk, you will learn how to automate tests in Python using pytest and Selenium WebDriver. We will cover:&lt;/p&gt;
&lt;p&gt;Using Selenium WebDriver like a pro
Modeling Web UI interactions with page objects
Writing “good” feature tests that are efficient, robust, and readable
Deciding what should and should not be tested with automation
Considering Playwright as a Selenium alternative
The example code is here:
&lt;a class="reference external" href="https://github.com/AndyLPK247/tau-intro-selenium-py"&gt;https://github.com/AndyLPK247/tau-intro-selenium-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also developed courses for Test Automation University on this topic:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://testautomationu.applitools.com/pytest-tutorial/"&gt;https://testautomationu.applitools.com/pytest-tutorial/&lt;/a&gt;
&lt;a class="reference external" href="https://testautomationu.applitools.com/selenium-webdriver-python-tutorial/"&gt;https://testautomationu.applitools.com/selenium-webdriver-python-tutorial/&lt;/a&gt;
&lt;a class="reference external" href="https://testautomationu.applitools.com/web-element-locator-strategies/"&gt;https://testautomationu.applitools.com/web-element-locator-strategies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.
HackMD: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fry4OQeYMt"&gt;https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fry4OQeYMt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Andrew Knight&lt;/p&gt;
&lt;p&gt;Pandy Knight is the “Automation Panda” - an engineer, consultant, and international speaker who builds solutions for software testing problems. He has designed and built robust test automation projects for web apps, service APIs, and operating systems with thousands of tests running continuously. He is the lead developer for Boa Constrictor, the .NET Screenplay Pattern. He also mentors others in good development, testing, and BDD practices. Andy currently works full-time as the Lead Software Engineer in Test for PrecisionLender at Q2. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-10-02:pycon-taiwan-2021/beyond-unit-tests-end-to-end-web-ui-testing-andrew-knight-pycon-taiwan-2021.html</guid></item><item><title>Behavior-Driven Python</title><link>/pycon-us-2018/behavior-driven-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Behavior-Driven Development (BDD) is gaining popularity as an improved way to collaborate over product features and tests. In Python, &lt;strong&gt;behave&lt;/strong&gt; is one of the leading BDD test frameworks. Using &lt;strong&gt;behave&lt;/strong&gt;, teams write Gherkin behavior scenarios (e.g., tests) in plain language, and then programmers write Python code to automate the steps. BDD testing is great because tests are self-documenting and steps abide by the DRY principle. An example test could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Given the DuckDuckGo home page is displayed&lt;/li&gt;
&lt;li&gt;When the user searches the phrase &amp;quot;Python&amp;quot;&lt;/li&gt;
&lt;li&gt;Then search results for &amp;quot;Python&amp;quot; are shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will teach how to use &lt;strong&gt;behave&lt;/strong&gt; to develop well-designed test scenarios and a robust automation framework. It will focus on the layers of the behave framework: feature files, step definitions, support classes, and config files. A full example project will be hosted on GitHub for audience members to reference after the talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-05-11:pycon-us-2018/behavior-driven-python.html</guid><category>behavior driven development</category><category>bdd</category><category>behave</category></item><item><title>Hands-On Web App Test Automation</title><link>/pycon-us-2020/hands-on-web-app-test-automation.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-04-17:pycon-us-2020/hands-on-web-app-test-automation.html</guid><category>tutorial</category></item><item><title>East Meets West When Translating Django Apps</title><link>/pycon-us-2020/east-meets-west-when-translating-django-apps.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-04-15:pycon-us-2020/east-meets-west-when-translating-django-apps.html</guid></item><item><title>Testing is Fun in Python!</title><link>/pydata-carolinas-2016/testing-is-fun-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing software is just as important in Python as it is in any other
programming language. Rather than treat testing as a “necessary evil,”
Python offers a number of versatile test frameworks to make it fun and
easy. This talk will cover basic testing best practices and introduce
a few of the popular frameworks, including unittest, doctest, py.test,
Nose, and Avocado.&lt;/p&gt;
&lt;p&gt;Testing is vital to the success of any software, including big data
and analytics code. Unfortunately, it is often regarded as a
“necessary evil” – extra work that slows down progress. In this
session, I will highlight how testing in Python can be fun, easy,
fast, and helpful.&lt;/p&gt;
&lt;p&gt;First, I will give a brief overview of basic best practices for
testing. We will talk about the difference between debugging and
testing, different types of tests, how to write good test cases, and
basic testing fixtures like assertions and results. I will focus on
unit testing, but the concepts can be applied to higher levels of
testing as well.&lt;/p&gt;
&lt;p&gt;Then, for the majority of the session, I will introduce different
Python test frameworks: - unittest as the standard module for unit
test classes. - doctest as a lightweight way to write short, self-
documenting assertions in docstrings. - py.test as a way to write very
concise test cases. - Nose as an extension of unittest with added
features. - Avocado as a comprehensive framework with parameters,
replay, and test discovery.&lt;/p&gt;
&lt;p&gt;This talk is designed to be useful to Python programmers of any skill
level. Only a basic understanding of Python is required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-09-15:pydata-carolinas-2016/testing-is-fun-in-python.html</guid></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>/pygotham-2018/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. To show how to get it done, we will follow the story of “Amanda the Panda” (representing the everyday Pythoneer) as she jumps into testing and automation with Python.&lt;/p&gt;
&lt;p&gt;Her journey includes:
1. How do I play “buzzword bingo” for testing?
2. Why do I need feature tests and not just unit tests?
3. What skills do I need?
4. What framework should I use?
5. How do I avoid duplicating test code?
6. How do I handle test data?
7. There are too many tests! Which ones should I automate?
8. How do I run tests in continuous integration?
9. How do I make tests reliable so they stop failing again and again?
10. How do I hire Software Engineers in Test?&lt;/p&gt;
&lt;p&gt;All examples will be given in Python (of course).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-10-05:pygotham-2018/egad-how-do-we-start-writing-better-tests.html</guid></item><item><title>Beyond Unit Tests: End-to-End Web UI Testing</title><link>/pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit tests are great, but they don’t catch all bugs because they don’t test
features like a user. However, Web UI tests are complicated and notoriously
unreliable. So, how can we write tests well? Never fear!&lt;/p&gt;
&lt;p&gt;Let’s learn how to write robust, scalable Web UI tests using Python, pytest,
and Selenium WebDriver that cover the full stack for any Web app. In this talk,
we will write one simple test together that covers DuckDuckGo searching.
We’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using Selenium WebDriver like a pro&lt;/li&gt;
&lt;li&gt;Modeling Web UI interactions in Python code&lt;/li&gt;
&lt;li&gt;Writing “good” feature tests that are efficient, robust, and readable&lt;/li&gt;
&lt;li&gt;Deciding what should and should not be tested with automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this talk, you’ll know how to write battle-hardened Web UI tests for
anyWeb app, including Django and Flask apps. I’ll provide the example code on
GitHub, as well as plenty of hands-on tutorials and resources to continue
learning after this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-10-04:pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html</guid></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>/pyohio-2018/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they
wreck themselves. Others have 1000s of tests that are flaky,
duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not
impossible. Start with proven advice from this talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-28:pyohio-2018/egad-how-do-we-start-writing-better-tests.html</guid></item><item><title>Surviving Without Python</title><link>/pyohio-2019/surviving-without-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is such a popular language for good reason: Its principles are
strong. However, if Python is “the second-best language for everything”…
that means the &lt;em&gt;first-best&lt;/em&gt; is often chosen instead. Oh no! How can
Pythonistas survive a project or workplace without our favorite
language? Take a deep breath, because I’ll show you how to apply things
that make Python great to other software spaces.&lt;/p&gt;
&lt;p&gt;Python is not the only “fish in the sea” - there are several good
languages and frameworks out there that are awesome in their own right.
And as software people, whether we are web developers, data scientists,
or some other role, we probably won’t spend 100% of our work using
Python. It’s inevitable. Web dev relies on JavaScript. Data scientists
often use R and Scala. Backends frequently use C# and Java. Success as a
modern software engineer requires inter-domain proficiency.&lt;/p&gt;
&lt;p&gt;Personally, even though I love Python, I don’t use it daily at my full
time job. Nevertheless, Pythonic thinking guides my whole approach to
software. I will talk about how the things that make Python great can be
applied to non- Python places in three primary ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Principles from the Zen of Python&lt;/li&gt;
&lt;li&gt;Projects that partially use Python&lt;/li&gt;
&lt;li&gt;People who build strong, healthy community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will provide stories, statistics, examples, projects, side-by-side
code comparisons, and pictures to explain these points well. Python’s
values can make the software world a better place!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sun, 28 Jul 2019 12:45:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-28:pyohio-2019/surviving-without-python.html</guid></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>/pytexas-2019/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. Start with proven advice from this talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-04-13:pytexas-2019/egad-how-do-we-start-writing-better-tests.html</guid><category>testing</category></item></channel></rss>