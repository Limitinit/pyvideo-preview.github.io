<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_steven-lott.atom.xml" rel="self"></link><id>/</id><updated>2020-04-17T00:00:00+00:00</updated><entry><title>Type Hints: Putting more Buzz in your Fizz</title><link href="/pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2020-04-17:pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html</id><summary type="html"></summary><category term="workshop"></category></entry><entry><title>NoSQL doesn't mean No Schema</title><link href="/pydata-dc-2016/nosql-doesnt-mean-no-schema.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2016-10-08:pydata-dc-2016/nosql-doesnt-mean-no-schema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;While databases like MongoDB don't require a formal schema, there's still a schema somewhere. It might be merely implied by validation rules in the code. Or, there might be a more formal representation. In some cases, the lack of strict schema creates a dynamic flexibility that creates value rapidly. Other times, the lack of formal structures leads to chaos. How can we find a balance?&lt;/p&gt;
</summary><category term="nosql"></category></entry><entry><title>The Five Kinds of Python Functions</title><link href="/pydata-dc-2016/the-five-kinds-of-python-functions.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2016-10-07:pydata-dc-2016/the-five-kinds-of-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is a function wraps a special method, like len().&lt;/p&gt;
</summary><category term="functions"></category></entry><entry><title>Avoiding Bad Database Surprises: Simulation and Scalability - Steven Lott</title><link href="/pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2018-11-16:pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html</id><summary type="html"></summary></entry><entry><title>Five Kinds of Python Functions - Steven Lott</title><link href="/pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2018-11-16:pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html</id><summary type="html"></summary></entry><entry><title>Keynote: A Sailor's View of Python And the idea of "Defensive Programming" - Steven Lott</title><link href="/pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:,2018-11-16:pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html</id><summary type="html"></summary></entry></feed>