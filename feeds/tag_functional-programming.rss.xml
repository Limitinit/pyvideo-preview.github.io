<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Functional programming in Python and even Haskell - Part 1</title><link>/europython-2013/functional-programming-in-python-and-even-haskell-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-04:europython-2013/functional-programming-in-python-and-even-haskell-part-1.html</guid><category>Functional Programming</category><category>Algorithms</category></item><item><title>Functional programming in Python and even Haskell - Part 2</title><link>/europython-2013/functional-programming-in-python-and-even-haskell-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2013-07-04:europython-2013/functional-programming-in-python-and-even-haskell-part-2.html</guid><category>Functional Programming</category><category>Algorithms</category></item><item><title>Decision Science with Probabilistic Programming</title><link>/europython-2020/decision-science-with-probabilistic-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Make robust optimal decisions with Python!&lt;/p&gt;
&lt;p&gt;Generative Models are the Swiss Army Knife for the Decision Scientist. Generative models allow the simulation of scenarios based on different business hypotheses (Bayesian priors). With Probabilistic Programming, decision makers can simulate the impact of business drivers in times of great uncertainty.&lt;/p&gt;
&lt;p&gt;Furthermore, Probabilistic Programming Languages provide all the inference tools necessary to identify the assumptions that have most likely generated an outcome. Inference is a statistical tool that enables optimal decision-making based on models that explicitly quantify uncertainty.&lt;/p&gt;
&lt;p&gt;Generative models of key optimization parameters are necessary input to Robust Optimization and Stochastic Programming problems.
Python provides all the tools to successfully integrate Probabilitistic Programs with Robust and Stochastic Optimization and therefore cope with high uncertainty in optimization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mattia Ferrini</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/decision-science-with-probabilistic-programming.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Data Science</category><category>Deep Learning</category><category>Functional Programming</category><category>Science</category></item><item><title>How to sort anything</title><link>/europython-2020/how-to-sort-anything.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keeping your data organized with &amp;quot;sorted&amp;quot; and custom functions&lt;/p&gt;
&lt;p&gt;Sorting is one of those things that we take for granted in Python. The built-in &amp;quot;sorted&amp;quot; function knows how to sort any iterable of objects that are themselves sortable.&lt;/p&gt;
&lt;p&gt;But hiding behind that simple description is a great deal of depth. In this talk, I'll go deep into what it means to sort, and how we can sort any collection of Python data.  We'll see how you can use custom functions to sort built-in data structures in new and interesting ways.  And we'll see how you can design your own custom classes such that they will sort in just the way you want.&lt;/p&gt;
&lt;p&gt;After watching this talk, you'll have a better understanding of sorting, built-in data structures, function objects, and how &amp;quot;magic methods&amp;quot; affect the our Python classes.  Moreover, you'll be able to write clearer, shorter, and more easily understood code.&lt;/p&gt;
&lt;p&gt;Topics I'll address in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;sorted&amp;quot; and Timsort&lt;/li&gt;
&lt;li&gt;Sorting a list of simple structures&lt;/li&gt;
&lt;li&gt;Reversing the direction with &amp;quot;reverse&amp;quot;&lt;/li&gt;
&lt;li&gt;Custom sorting with &amp;quot;key&amp;quot;&lt;/li&gt;
&lt;li&gt;Stable sort&lt;/li&gt;
&lt;li&gt;Sorting a list of dicts&lt;/li&gt;
&lt;li&gt;Using &amp;quot;lambda&amp;quot;&lt;/li&gt;
&lt;li&gt;Using operator.itemgetter&lt;/li&gt;
&lt;li&gt;Sorting a list of named tuples&lt;/li&gt;
&lt;li&gt;Sorting a list of objects&lt;/li&gt;
&lt;li&gt;Making your object sortable&lt;/li&gt;
&lt;li&gt;The functools.total_ordering decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an intermediate-level talk; I'll assume that anyone attending knows how to write functions, classes, and methods.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuven Lerner</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/how-to-sort-anything.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Data</category><category>Development</category><category>Functional Programming</category></item><item><title>How to write multi-paradigm code</title><link>/europython-2020/how-to-write-multi-paradigm-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;... without making a mess&lt;/p&gt;
&lt;p&gt;Python is a powerful multi-paradigm language which combines elements of object-orientation and functional programming. Both concepts can be really powerful if used right. But what if you use them together? It can be pragmatic and very efficient, but things can also get messy really quickly.&lt;/p&gt;
&lt;p&gt;This talk explores peaceful co-existence of oo-classes and pure functions in the same code base. The focus is on identifying the right tool for the right job and bringing together the best of both. The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code Structure&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;State Handling&lt;/li&gt;
&lt;li&gt;Multiple implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:
There are no formal prerequisites for this course, although it is recommended that participants have a strong background in Python and its code structuring mechanisms, as well as a deep understanding of at least one of the paradigms of OOP and FP.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Mistler</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-07-23:europython-2020/how-to-write-multi-paradigm-code.html</guid><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Abstractions</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category><category>Functional Programming</category></item><item><title>Programación funcional con Python</title><link>/pycon-es-2014/programacion-funcional-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta charla es un recorrido por las posibilidades para programación funcional que tiene python, incluyendo las que están en las baterias de python, las propias estructuras inmutables de python y bibliotecas externas como fn.py.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Espino</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-04-06:pycon-es-2014/programacion-funcional-con-python.html</guid><category>functional programming</category><category>fn</category></item><item><title>Haskell es mi pastor y Python, mi profeta</title><link>/pycon-es-2017/haskell-es-mi-pastor-y-python-mi-profeta.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se explicará el paradigma de programación funcional. Para ello, se utilizará como ejemplo el lenguaje puramente funcional Haskell y se explicará cómo hacer programación funcional en Python. Por último, se comparará la eficiencia y la elegancia del paradigma de programación funcional frente al imperativo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Braulio Vargas López</dc:creator><pubDate>Sun, 24 Sep 2017 11:30:00 +0200</pubDate><guid isPermaLink="false">tag:,2017-09-24:pycon-es-2017/haskell-es-mi-pastor-y-python-mi-profeta.html</guid><category>haskell</category><category>functional programming</category></item><item><title>Functional Programming for Data Science</title><link>/pycon-ireland-2018/functional-programming-for-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a versatile language and it supports a wide variety of programming paradigms. At its heart it's object-oriented, but in this talk I want to discuss how you can use Python to write clean, efficient, and modular functional code. I'll begin by giving a little background on what functional programming is and why you might use it. I'll talk through some of the simple primitives of functional programming, and I'll give some useful examples of functional code for data analysis. The aim is to give a practical and pragmatic introduction to these ideas, covering some of the strengths and weaknesses of Python as a functional language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neal Ó Riain</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-11-10:pycon-ireland-2018/functional-programming-for-data-science.html</guid><category>functional programming</category><category>data science</category></item><item><title>Functional Programming in Python</title><link>/pycon-philippines-2012/functional-programming-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intro to functional programming using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2012-06-30:pycon-philippines-2012/functional-programming-in-python.html</guid><category>functional programming</category></item></channel></rss>