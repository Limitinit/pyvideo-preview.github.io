<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_nisarg-shah.atom.xml" rel="self"></link><id>/</id><updated>2021-03-22T00:00:00+00:00</updated><entry><title>Developing GraphQL API in Django using Graphene</title><link href="/europython-2020/developing-graphql-api-in-django-using-graphene.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Nisarg Shah</name></author><id>tag:,2020-07-23:europython-2020/developing-graphql-api-in-django-using-graphene.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build GraphQL schema, queries, and mutations in Django using graphene library&lt;/p&gt;
&lt;p&gt;GraphQL technology has become popular nowadays. While developing REST APIs, there are many things that developers need to take into consideration. There are multiple endpoints and over-fetching is the main problem of REST. GraphQL offers a unique approach and architecture for developing APIs. How is that efficient?&lt;/p&gt;
&lt;p&gt;While using GraphQL, a client can request the data which is needed. It is an alternative for building APIs in place of REST. It’s a query language that can work as a medium between the frontend and backend.&lt;/p&gt;
&lt;p&gt;The journey to develop GraphQL APIs in python needs some requirements and knowledge. We will be building APIs in the Django framework using a graphene library which includes many features of GraphQL such as ObjectTypes, Queries, Mutations, etc. We will start by understanding these concepts followed by some code. This includes detailed information about the Query class, what are resolvers, and where to write business logic, how pagination can be incorporated with queries would be included. Also, it will include the information about the Mutation class, arguments needed for mutation, and what type of response can be returned on successful operations.&lt;/p&gt;
&lt;p&gt;Learning outcomes would be the understanding of code and building GraphQL APIs using graphene in a proper and structured way.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Databases"></category><category term="Django"></category><category term="PostgreSQL"></category><category term="Python 3"></category></entry><entry><title>Let REST Do Rest: Deep Dive In GraphQL With Django</title><link href="/python-web-conf-2021/let-rest-do-rest-deep-dive-in-graphql-with-django.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Nisarg Shah</name></author><id>tag:,2021-03-22:python-web-conf-2021/let-rest-do-rest-deep-dive-in-graphql-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Let REST Do Rest: Deep Dive In GraphQL With Django&amp;quot; by: Nisarg Shah&lt;/p&gt;
&lt;p&gt;GraphQL is a query language and uses a schema based approach. It has only one endpoint and client can request the needed data. While building APIs, schema can be fixed and teams can work independently as the structure is fixed.&lt;/p&gt;
&lt;p&gt;I will initiate my talk with some overview on GraphQL APIs and concepts of GraphQL. Following that, I will cover some core concepts which are required for developing some basic queries and mutations. Those concepts will include fields, object types, schema, resolvers, etc. Along with this, I will cover the N+1 problem of GraphQL queries and will look into a way to optimize the GraphQL queries for solving this problem.&lt;/p&gt;
&lt;p&gt;Also versioning of GraphQL APIs is not similar to versioning of REST APIs, it’s quite different and interesting. Only updates of schema fields are needed. Many times GraphQL is used, but in some cases REST is preferred over GraphQL.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</summary><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry></feed>