<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><item><title>Sufficiently Advanced Testing with Hypothesis</title><link>/euroscipy-2019/sufficiently-advanced-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hypothesis is a testing package that will search for counterexamples
to your&lt;/div&gt;
&lt;div class="line"&gt;assertions – so you can write tests that provide a high-level
description of your&lt;/div&gt;
&lt;div class="line"&gt;code or system, and let the computer attempt a Popperian
falsification. If it&lt;/div&gt;
&lt;div class="line"&gt;fails, your code is (probably) OK… and if it succeeds you have a
minimal input&lt;/div&gt;
&lt;div class="line"&gt;to debug.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Come along and learn the principles of property-based testing, how to
use&lt;/div&gt;
&lt;div class="line"&gt;Hypothesis, and how to use it to check scientific code – whether
highly- polished&lt;/div&gt;
&lt;div class="line"&gt;or quick-and-dirty!&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;You can even use it to test 'black boxes', such as simulations, where
we have no&lt;/div&gt;
&lt;div class="line"&gt;way of independently verifying that some input leads to the right
output!&lt;/div&gt;
&lt;div class="line"&gt;Intrigued? Come and learn about the power of embedding assertions in
your&lt;/div&gt;
&lt;div class="line"&gt;code, and metamorphic relations in your tests!&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Testing research code can be difficult, but is essential for robust
results. Using Hypothesis, a tool for property-based testing, I'll show
how testing can be both easier and dramatically more powerful - even for
complex &amp;quot;black box&amp;quot; codes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-09-03:euroscipy-2019/sufficiently-advanced-testing-with-hypothesis.html</guid></item><item><title>Lightning Talks - Sunday</title><link>/pycon-au-2017/lightning-talks-sunday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=0m19s"&gt;0:19&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sam Kitajima-Kimbrel&lt;/td&gt;
&lt;td&gt;You Aren't Facebook, and That's OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=4m55s"&gt;4:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jason King&lt;/td&gt;
&lt;td&gt;Don't do what I did&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=9m55s"&gt;9:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Evan Kohilas&lt;/td&gt;
&lt;td&gt;Rubber Snaek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=12m13s"&gt;12:13&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dr. Russell Keith-Magee&lt;/td&gt;
&lt;td&gt;Tools for Apiarists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=17m23s"&gt;17:23&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;William Brown&lt;/td&gt;
&lt;td&gt;Hard CPUs Make Multithreading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=21m54s"&gt;21:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Rueben&lt;/td&gt;
&lt;td&gt;Joining the dots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=24m16s"&gt;24:16&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Malcolm Ramsay&lt;/td&gt;
&lt;td&gt;How I Reinvented Solarized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=26m47s"&gt;26:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zac Hatfield-Dodds&lt;/td&gt;
&lt;td&gt;From REPL to reliable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=31m55s"&gt;31:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Daniel McCarthy&lt;/td&gt;
&lt;td&gt;Hexapod and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=35m35s"&gt;35:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lilly Ryan&lt;/td&gt;
&lt;td&gt;Towns I Wish I Could Visit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=41m00s"&gt;41:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Rothstein&lt;/td&gt;
&lt;td&gt;I'm a mockoholic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=45m54s"&gt;45:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Moore&lt;/td&gt;
&lt;td&gt;ESP32 and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=48m38s"&gt;48:38&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Katie Bell&lt;/td&gt;
&lt;td&gt;Hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=53m37s"&gt;53:37&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Hall&lt;/td&gt;
&lt;td&gt;A Brief History of 'What is the Time?'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-08-06:pycon-au-2017/lightning-talks-sunday.html</guid><category>lightning talks</category></item><item><title>Escape from auto-manual testing with Hypothesis!</title><link>/pycon-au-2018/escape-from-auto-manual-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There’s a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from ‘an integer’ to ‘matching this regex’ to ‘Django model’; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-25:pycon-au-2018/escape-from-auto-manual-testing-with-hypothesis.html</guid></item><item><title>Sufficiently Advanced Testing</title><link>/pycon-au-2019/sufficiently-advanced-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing tests is great, and generating randomized tests even better... but we can push the techniques further still! What is a metamorphic relation good for?  How could (should?) you use a SAT solver for tests?  What about symbolic execution, guided fuzzing, delta debugging?  Come and find out!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/sufficiently-advanced-testing"&gt;https://2019.pycon-au.org/talks/sufficiently-advanced-testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 13:30:00 2019 at C3.6&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-08-03:pycon-au-2019/sufficiently-advanced-testing.html</guid></item><item><title>Stop Writing Tests!</title><link>/pycon-au-2020/stop-writing-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/TCT3GH"&gt;https://2020.pycon.org.au/program/TCT3GH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We often think of manual testing as slower and less effective than automated testing,
but most test suites haven't automated that much!  Computers can execute all our
pre-defined tests very quickly - and this is definitely a good thing, especially for
regression tests - but the tricky parts are still done by humans.&lt;/p&gt;
&lt;p&gt;We select test cases (inputs) and check that the corresponding outputs make sense;
we write functions that &amp;quot;arrange, act, and assert&amp;quot; for our tests; and we decide -
or script via CI systems - which tests to execute and when.&lt;/p&gt;
&lt;p&gt;So lets explore some next-generation tools that we could use to automate these
remaining parts of a testing workflow!&lt;/p&gt;
&lt;p&gt;PROPERTY-BASED TESTING helps you to write more powerful tests by automating selection
of test cases: instead of listing input-output pairs, you describe the kind of data
you want and write a test that passes &lt;em&gt;for all X...&lt;/em&gt;.  We'll see a live demo, and
learn something about the Python builtins in the process!&lt;/p&gt;
&lt;p&gt;CODE INTROSPECTION, and a handy templating tool, can help write tests for you.
Do you need to know any more than which code to test, and what properties should hold?&lt;/p&gt;
&lt;p&gt;ADAPTIVE FUZZING tools take CI to its logical conclusion: instead of running a fixed
set of tests on each push, they sit on a server and run tests full-time... fine-tuning
themselves to find bugs in &lt;em&gt;your&lt;/em&gt; project and pulling each new commit as it lands!&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll know what these three kinds of tools can do -
and how to get started with automating the &lt;em&gt;rest&lt;/em&gt; of your testing tomorrow.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Sat Sep  5 11:35:00 2020 at Curlyboi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-09-05:pycon-au-2020/stop-writing-tests.html</guid><category>PyCon</category><category>PyConAU</category><category>PyConline</category><category>Python</category><category>ZacHatfield-Dodds</category><category>pyconau</category><category>pyconau_2020</category></item><item><title>Escape from auto-manual testing with Hypothesis!</title><link>/pycon-us-2019/escape-from-auto-manual-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve ever written some tests, or discovered that tested code can
still have bugs, this tutorial is for you. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/"&gt;Hypothesis&lt;/a&gt; lets you write
tests that should pass for every case… then finds bugs by generating
inputs you wouldn’t have looked for. Even better, you get to save time
by writing fewer but more powerful tests, so this process improves your
productivity as well as your code!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn what property-based testing is, and how it relates to &lt;a class="reference external" href="https://www.hillelwayne.com/post/a-bunch-of-tests/"&gt;other
kinds of tests&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Write your first property-based test, with example code and an
overview of common tactics!&lt;/li&gt;
&lt;li&gt;Describe inputs - use and compose strategies, then define your own or
infer them from other code!&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;hypothesis.stateful&lt;/tt&gt; to generate and test whole programs&lt;/li&gt;
&lt;li&gt;Get the low-down on Hypothesis: performance tips, debugging tools,
and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll be ready to find real bugs by half way through the tutorial; and
by the end you’ll be ready to use Hypothesis in ways we never imagined.&lt;/p&gt;
&lt;p&gt;There will be dedicated time for Q&amp;amp;A about applying Hypothesis (or PBT
ideas) in your domain, testing anything from web apps to big data
pipelines to other languages, before you leave to drag the world kicking
and screaming into a new and terrifying age of high quality software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Thu, 02 May 2019 13:20:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-05-02:pycon-us-2019/escape-from-auto-manual-testing-with-hypothesis.html</guid><category>tutorial</category></item><item><title>Introduction to Property-Based Testing</title><link>/pycon-us-2021/introduction-to-property-based-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass?&lt;/p&gt;
&lt;p&gt;Property-based testing might be just what you need!&lt;/p&gt;
&lt;p&gt;After this introduction to property-based testing, you’ll be comfortable with Hypothesis, a friendly but powerful property-based testing library. You’ll also known how to check and enforce robust properties in your code, and will have hands-on experience finding real bugs.&lt;/p&gt;
&lt;p&gt;Where traditional example-based tests require you to write out each exact scenario to check - for example, assert divide(3, 4) == 0.75, property-based tests are generalised and assisted. You describe what kinds of inputs are allowed, write a test that should pass for any of them, and Hypothesis does the rest!&lt;/p&gt;
&lt;p&gt;from hypothesis import given, strategies as st&lt;/p&gt;
&lt;p&gt;&amp;#64;given(a=st.integers(), b=st.integers())
def test_divide(a, b):
result = a / b
assert a == b * result
There’s the obvious ZeroDivisionError, fixable with b = st.integers().filter(lambda b: b != 0), but there’s another bug lurking. Can you see it? Hypothesis can!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-05-14:pycon-us-2021/introduction-to-property-based-testing.html</guid></item><item><title>Escape from auto-manual testing with Hypothesis!</title><link>/pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There's a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from 'an integer' to 'matching this regex' to 'Django model'; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-06-09:pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html</guid></item><item><title>Test Research Code the Easy Way: By Generating Random Inputs with Hypothesis</title><link>/scipy-2019/test-research-code-the-easy-way-by-generating-random-inputs-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing correct software is difficult, and even scientists don’t always get it right. Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian falsification. If it fails, your code is (probably) OK… and if it succeeds you have a minimal input to debug. Come along and learn the principles of property-based testing, how to use Hypothesis, and how to use it to check scientific code – whether highly-polished or quick-and-dirty!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-11:scipy-2019/test-research-code-the-easy-way-by-generating-random-inputs-with-hypothesis.html</guid></item><item><title>Escape from Auto manual Testing with Hypothesis!</title><link>/scipy-2019/escape-from-auto-manual-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian falsification. If it fails, your code is (probably) OK… and if it succeeds you have a minimal input to debug. Come along and learn the principles of property-based testing, how to use Hypothesis, and how to use it to check scientific code – whether highly-polished or quick-and-dirty!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-07-10:scipy-2019/escape-from-auto-manual-testing-with-hypothesis.html</guid><category>tutorial</category></item></channel></rss>