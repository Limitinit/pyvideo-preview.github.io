<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/tag_type-hinting.atom.xml" rel="self"></link><id>/</id><updated>2020-07-23T00:00:00+00:00</updated><entry><title>Code quality in Python</title><link href="/europython-2019/code-quality-in-python.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Radosław Ganczarek</name></author><id>tag:,2019-07-12:europython-2019/code-quality-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Four years ago I talked about code quality during EuroPython in
Bilbao. A lot of things changed from that time. Firstly, most tools I
presented were still developed and gained new features, but also new
ones appeared I wanted to discuss with you. Secondly, Python changed,
Python 3 has type hints on board and there is a new tool dedicated to
checking the types. Thirdly - I changed. I'm more distanced form my
zealous approach from four years ago. I got real and reasonable.
That's why I wanted to talk about code quality tools in Python again.&lt;/div&gt;
&lt;div class="line"&gt;I'll talk about all the software that can make code review a bit
simpler by pointing out possible errors, duplicates or unused code.
I'll talk again about formatters and how can they be used in
modern-time projects. And I'll talk about hobgoblins, if you know what
I mean :)&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Best Practice"></category><category term="Code Analysis"></category><category term="Python 3"></category><category term="Tooling"></category><category term="Type-Hinting"></category></entry><entry><title>The Story of Features Coming in Python 3.8 and Beyond</title><link href="/europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:,2019-07-12:europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's coming in Python 3.8? You can learn it by yourself by reading an
excellent document [What's New in Python 3.8][1]. I'm not going to
retell this document. Instead I'll focus on things barely described
there or not mentioned at all:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why will the new features appear in Python 3.8 and what's the story
behind them?&lt;/li&gt;
&lt;li&gt;What is being discussed and developed now, but won't appear in Python
3.8?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll share the news I learned at PyCon 2019 from the talks and
discussions with Python core developers. I'll mention the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New syntax: &lt;tt class="docutils literal"&gt;x := expr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f(...,&lt;/span&gt; /, &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f'{expr=}'&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;New types: &lt;tt class="docutils literal"&gt;Literal&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Final&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;TypedDict&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Future features of typing and async/await&lt;/li&gt;
&lt;li&gt;New approaches to optimizing Python: sub-interpreters, mypyc&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Compiler and Interpreters"></category><category term="New Features"></category><category term="Python 3"></category><category term="Type-Hinting"></category></entry><entry><title>Static typing: beyond the basics of def foo(x: int) -&gt; str:</title><link href="/europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:,2019-07-10:europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been warming up to static typing for a few
years now. You may have seen talks that did a great job of introducing
the basic concepts, mypy, and high-level strategies to cover existing
code bases.&lt;/p&gt;
&lt;p&gt;We need to go deeper.&lt;/p&gt;
&lt;p&gt;Let’s talk about the challenges you inevitably encounter when you try to
type- check a large code base. One full of many moving parts, complex
architectures, metaprogramming tricks, and interfaces with a dozen other
packages.&lt;/p&gt;
&lt;p&gt;Static type checking is very powerful – when you use it to maximum
advantage and explain your code to the typechecker accurately. We will
cover a few tools at your disposal: generics, signature overloads,
protocols, custom mypy plug- ins, and more.&lt;/p&gt;
&lt;p&gt;There is more than just tools, though. Behind them all are universal
concepts valid in any language. I hope to convince you that thinking in
terms of the type system helps you write better code…&lt;/p&gt;
</summary><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry><entry><title>Full Stack Type Safety</title><link href="/europython-2020/full-stack-type-safety.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Szymon Pyżalski</name></author><id>tag:,2020-07-23:europython-2020/full-stack-type-safety.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Beyond PEP-484 – ensure type consistency between layers&lt;/p&gt;
&lt;p&gt;The introduction of PEP-484 gave us an option to enforce the internal type consistency of our Python applications. Our web projects, however, consist of multiple layers, with the Python app taking the role of an HTTP backend. What options do we have to ensure consistency across our stack?
In this talk, we will see some technologies that we can employ to enforce the contract between the layers of our stack. Especially between the frontend and backend. We will demo, how this can be achieved with REST/Swagger and with GraphQL. As both the Graphene library and the open API support for django-rest-framework are both a work-in-progress, we would check, what is possible, and what is still lacking. We will also discuss various approaches to the design: backend first, auto-generating backend from the spec, and TDD, with their advantages and disadvantages.
The topic would be discussed on a simple web application. We would try to play some realistic scenarios, where a careless developer breaks the contract to see how such a mistake can be spotted in the CI phase of the development cycle.
Basic knowledge of Django and JavaScript is required to understand the talk. Some familiarity with TypeScript and ReactJS would also be helpful. However, I plan to explain the code to the listeners that didn’t have prior exposure to these technologies.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Django"></category><category term="JavaScript"></category><category term="Type-Hinting"></category><category term="Web Protocols"></category></entry><entry><title>Static Typing in Python</title><link href="/europython-2020/static-typing-in-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:,2020-07-23:europython-2020/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This means that you don’t need to say what a given variable will hold, or whether your function will return a string or an integer (or sometimes one, and sometimes another!). This has historically made Python a very flexible and beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional “type hints” and various tools to aid in adding types to Python code. We’ll see what this means for Python, for Python programmers, and what the future has in store for Python’s type system.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Python 3"></category><category term="Static Analysis"></category><category term="Tooling"></category><category term="Type-Hinting"></category><category term="python"></category></entry><entry><title>Writing Good Python</title><link href="/europython-2020/writing-good-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Prashant Chaubey</name></author><id>tag:,2020-07-23:europython-2020/writing-good-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like other programming languages, it is easy to write cryptic, unmaintainable, and rigid Python code. Moreover, in teams, this problem escalates due to varied coding styles of developers. How to ensure code quality and consistency? My goal with this talk is to educate my audience about some tools and libraries that can help us in making our code more consistent.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Code Analysis"></category><category term="Documentation"></category><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry></feed>