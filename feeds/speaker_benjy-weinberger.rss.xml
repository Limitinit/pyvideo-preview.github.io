<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><item><title>Creating extensible workflows with off-label use of Python</title><link>/pycon-us-2021/creating-extensible-workflows-with-off-label-use-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Workflow-oriented systems have many uses, including data processing and analysis, ETL, CI/CD, and more. But creating a programmatic interface to a workflow system is a delicate balancing act: we want the API to be flexible enough to support useful work, but also constrained enough that tasks run cooperatively within the larger system.&lt;/p&gt;
&lt;p&gt;We faced this challenge when designing the task API for the Pants build system. We needed to allow custom task code to enjoy the benefits of complex features like caching, concurrency and remote execution, without every task author having to reason about them.&lt;/p&gt;
&lt;p&gt;In this talk we'll show how we found the right balance through unconventional use of Python's type annotations, coroutines, and dataclasses. Combining these seemingly disparate features in the context of a workflow engine allows you to build elegant extensibility APIs with just the right amount of flexibility.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1aWZjk3tZUp37RDmZZxy0j8OjbatzkuWLfuSh84Lzwfk/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/1aWZjk3tZUp37RDmZZxy0j8OjbatzkuWLfuSh84Lzwfk/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjy Weinberger</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-05-14:pycon-us-2021/creating-extensible-workflows-with-off-label-use-of-python.html</guid></item></channel></rss>