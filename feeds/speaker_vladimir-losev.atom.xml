<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_vladimir-losev.atom.xml" rel="self"></link><id>/</id><updated>2021-10-01T00:00:00+00:00</updated><entry><title>How we dealt with poor code analysis support in our generator, metaclasses, and code generation heavy projects</title><link href="/pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Vladimir Losev</name></author><id>tag:,2021-10-01:pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Projects that heavily rely on such Python features as metaclasses,
decorators, or code-generation face a problem of poor support by static code
analysis tools. This results in little to no suggestions in IDE or broken
mypy tests.&lt;/p&gt;
&lt;p&gt;We'll talk about how we addressed this issue on our open-source
[&lt;a class="reference external" href="https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit"&gt;https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit&lt;/a&gt;)
and [&lt;a class="reference external" href="https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit"&gt;https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit&lt;/a&gt;)
projects.&lt;/p&gt;
</summary></entry></feed>