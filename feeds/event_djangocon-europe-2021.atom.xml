<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/event_djangocon-europe-2021.atom.xml" rel="self"></link><id>/</id><updated>2021-06-04T00:00:00+00:00</updated><entry><title>All about The Django Software Foundation DSF</title><link href="/djangocon-europe-2021/all-about-the-django-software-foundation-dsf.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Anna Makarudze</name></author><id>tag:,2021-06-04:djangocon-europe-2021/all-about-the-django-software-foundation-dsf.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Software Foundation (DSF) is the independent foundation established as a 501(c)(3) non-profit that supports the development of Django. The goal of the DSF is to promote, support, and advance its open-source project, the Django Web framework. In my talk, I will give an overview of what the DSF is doing to support the advancement of Django through the various teams, committees, and boards that make up the foundation. I will also talk about how to contribute to the advancement of Django through both code and non-code contributions.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Build, deploy and scale Django, GraphQL and SPA</title><link href="/djangocon-europe-2021/build-deploy-and-scale-django-graphql-and-spa.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>dhilipsiva</name></author><id>tag:,2021-06-04:djangocon-europe-2021/build-deploy-and-scale-django-graphql-and-spa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After building, deploying and scaling a dozen on products with the Django + GraphQL + SPA (React) setup, we have come to understand what works and what does not. In this talk, I will share our findings on how to do the same.&lt;/p&gt;
&lt;p&gt;I will be using a simplified StackOverflow clone for demonstration. First, I will introduce Python-Graphene (and few other related libraries), the library that is used to build GraphQL endpoints. Then the talk will focus on how to structure your Django GraphQL project. Share the toolchain (a few management command scripts) that are handy to export your constants &amp;amp; GraphQL schemas to be used with your SPA. Integrating with an SPA (React for demo purpose) Auth, API calls.&lt;/p&gt;
&lt;p&gt;Then I will talk about how you go about deploying your API using 2 different strategies:
1. Docker compose / swarm (Vendor independent, non-production workloads)
2. AWS Fargate (Vendor dependant, production workloads, serverless containers)&lt;/p&gt;
&lt;p&gt;And a cost-effective and highly scale-able deployment strategy for your SPA (using AWS S3, CloudFront and ACM).&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>KEYNOTE: We're all part of this Jazzband 5 years later</title><link href="/djangocon-europe-2021/keynote-were-all-part-of-this-jazzband-5-years-later.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Jannis Leidel (he/him)</name></author><id>tag:,2021-06-04:djangocon-europe-2021/keynote-were-all-part-of-this-jazzband-5-years-later.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Jazzband project was launched 5 years ago to help maintainers find a way to secure the long-term maintenance of their Python projects. The result was a collective of volunteers that stepped up in a big way on the way to solve Open Source sustainability.&lt;/p&gt;
&lt;p&gt;In this talk I'll dive into the history of the project, the good and bad of running the project for +5 years and the next steps for Jazzband.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Load Testing a Django Application using LocustIO</title><link href="/djangocon-europe-2021/load-testing-a-django-application-using-locustio.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Pranjal Jain</name></author><id>tag:,2021-06-04:djangocon-europe-2021/load-testing-a-django-application-using-locustio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fed up of using existing tools for determining benchmark and doing load testing for your server application? LocustIO is present to the rescue. LocustIO is an easy-to-use, distributed, user load testing tool. It is intended for load-testing web sites (or other systems) and figuring out how many concurrent users a system can handle.&lt;/p&gt;
&lt;p&gt;Using Locust you will be able to determine the system performance at different endpoints in very simple and efficient way. This will provide you a rough idea on how many requests per second is supported by your application.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Putting a shell or a desktop in your Django app</title><link href="/djangocon-europe-2021/putting-a-shell-or-a-desktop-in-your-django-app.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Maari Tamm</name></author><id>tag:,2021-06-04:djangocon-europe-2021/putting-a-shell-or-a-desktop-in-your-django-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In our City Cloud Academy (&lt;a class="reference external" href="https://academy.citycloud.com"&gt;https://academy.citycloud.com&lt;/a&gt;) learning platform, we enable learners to interact with real-world hands-on lab environments, so that they can learn complex technologies like OpenStack, Kubernetes, Terraform, Ceph, Ansible, and others. To do that, we use Apache Guacamole (&lt;a class="reference external" href="https://guacamole.apache.org/)'s"&gt;https://guacamole.apache.org/)'s&lt;/a&gt; &lt;cite&gt;guacd&lt;/cite&gt; service to provide learners with interactive shell terminals — or even full desktop environments — that run right in people's browsers, no additional software required.&lt;/p&gt;
&lt;p&gt;The Guacamole platform is normally deployed in conjunction with a Java servlet environment (&lt;a class="reference external" href="https://guacamole.apache.org/doc/gug/guacamole-architecture.html#web-application"&gt;https://guacamole.apache.org/doc/gug/guacamole-architecture.html#web-application&lt;/a&gt;) (commonly Apache Tomcat). But the Guacamole protocol is not tied to the Java language in any way, and a Python websocket proxy (pyguacamole (&lt;a class="reference external" href="https://pypi.org/project/pyguacamole/"&gt;https://pypi.org/project/pyguacamole/&lt;/a&gt;)) is readily available under an open source (MIT) license.&lt;/p&gt;
&lt;p&gt;In this talk, we discuss how we implemented a learning platform (based on Open edX (&lt;a class="reference external" href="https://open.edx.org"&gt;https://open.edx.org&lt;/a&gt;)) that deploys an ASGI service under Daphne (&lt;a class="reference external" href="https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/daphne/"&gt;https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/daphne/&lt;/a&gt;), uses pyguacamole to provide an asynchronous websocket connection to a Guacamole service, and thus creates a highly scalable, interactive, and immersive learning environment that helps people learn complex technology with no hardware or cloud investment at all.&lt;/p&gt;
&lt;p&gt;## Slides&lt;/p&gt;
&lt;p&gt;The slides (with full speaker notes) are up at &lt;a class="reference external" href="https://fghaas.github.io/djceu2021"&gt;https://fghaas.github.io/djceu2021&lt;/a&gt; and &lt;a class="reference external" href="https://mrtmm.github.io/djceu2021"&gt;https://mrtmm.github.io/djceu2021&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Rewriting Django from almost scratch in 2021</title><link href="/djangocon-europe-2021/rewriting-django-from-almost-scratch-in-2021.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Emma Delescolle</name></author><id>tag:,2021-06-04:djangocon-europe-2021/rewriting-django-from-almost-scratch-in-2021.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the decisions that was made 15 years ago was to use &lt;em&gt;home-made&lt;/em&gt; code for everything. Django depends on very few libraries. Django doesn't use anything from the Python eco-system, when it comes to ORM, templates, routing, etc.&lt;/p&gt;
&lt;p&gt;And that is a decision I would probably have done at the time as well. The Python world was much less welcoming at the time and documentation was still regarded as a second-class citizen. Let's not even mention the wrath you were taking the risk of exposing yourself to if you dared make a pull request on a project you weren't involved with.&lt;/p&gt;
&lt;p&gt;Those choices are not the only reasons to consider a rewrite though... After attending several Django conferences, I noticed a few trends about what prominent Django developers would like to change. For example &lt;strong&gt;WSGI middlewares&lt;/strong&gt; is something that's often put on the table, &lt;strong&gt;websockets&lt;/strong&gt; is another of those things that comes up very often.&lt;/p&gt;
&lt;p&gt;It is true that the world of the web is quite different today compared to what it was 15 years ago. It seems to me that today &lt;strong&gt;REST API's&lt;/strong&gt; and &lt;strong&gt;websockets&lt;/strong&gt; are first class citizens while server-rendered pages have become less important. Once again, that's just a personal feeling.&lt;/p&gt;
&lt;p&gt;A complete Django rewrite is also not my very own idea, several people have been working on a similar idea. Tom Christie has been working on many libraries in order to be able to rewrite Django as an async framework in order to better accommodate websockets. Others like Tobias have been working on something similar but starting at the other end of the problem. I guess this is just my own version of that thought experiment.&lt;/p&gt;
&lt;p&gt;For this thought experiment I will care about retaining the &amp;quot;spirit&amp;quot; of Django as I perceive it but I will not care at all about backward compatibility!&lt;/p&gt;
&lt;p&gt;## What does a Django rewrite needs to achieve in 2021?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Batteries included: Anything that claims to be a Django-like needs to come with everything out of the box&lt;/li&gt;
&lt;li&gt;A friendly ORM with a syntax that is closer to the objects than to SQL&lt;/li&gt;
&lt;li&gt;Middlewares&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Authentication and authorization&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Easy to build REST API's&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;Template-based rendering&lt;/li&gt;
&lt;li&gt;Static files serving during development&lt;/li&gt;
&lt;li&gt;Easy documenting of API's&lt;/li&gt;
&lt;li&gt;MVC implementation&lt;/li&gt;
&lt;li&gt;Easy to use CRUD controller and associated views&lt;/li&gt;
&lt;li&gt;A powerful admin(based on its own CRUD controllers)&lt;/li&gt;
&lt;li&gt;Error management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will cover all of those points, how they could be approached and whether using an existing Python library for that job might be a good idea&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;
-  Cordy (&lt;a class="reference external" href="https://gitlab.levitnet.be/levit/cordy/-/tree/master"&gt;https://gitlab.levitnet.be/levit/cordy/-/tree/master&lt;/a&gt;)
- CookieCutter for starting a project (&lt;a class="reference external" href="https://gitlab.levitnet.be/levit/cordy-project/-/tree/master"&gt;https://gitlab.levitnet.be/levit/cordy-project/-/tree/master&lt;/a&gt;)
- Demo app (Splendid) (&lt;a class="reference external" href="https://gitlab.levitnet.be/emma/splendid/-/tree/master"&gt;https://gitlab.levitnet.be/emma/splendid/-/tree/master&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a class="reference external" href="https://levit.be/uploads/Kazam_screencast_00003.mp4"&gt;https://levit.be/uploads/Kazam_screencast_00003.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a class="reference external" href="https://slides.com/emma_be/cordy"&gt;https://slides.com/emma_be/cordy&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Securing Django Applications</title><link href="/djangocon-europe-2021/securing-django-applications.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Gajendra Deshpande</name></author><id>tag:,2021-06-04:djangocon-europe-2021/securing-django-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most popular Python-based web framework used for creating web applications. The web applications are vulnerable for various reasons including a) configuration settings of the web applications b) lack of implementation of security best practices and secure coding and c) lack of awareness of secure first web applications among developers. The vulnerable web applications put the data of the customers at greater risk and the compromised code can lead to problems beyond control. It is very important to develop secure web applications to protect customer data and code to mitigate the risk. In this talk, we will focus on two aspects. First, performing penetration testing on Django web applications to identify vulnerabilities and scanning for Open Web Application Security Project (OWASP) Top 10 risks. Second, strategies and configuration settings for making the source code and Django applications secure. We will also discuss the Djangohunter tool to identify incorrectly configured Django applications that are exposing sensitive information.
Outline
1. Security aspects of Django web applications (03 minutes)
2. Penetration testing of Django web applications (07 Minutes)
3. Overview of OWASP Top 10 risks (07 Minutes)
4. Djangohunter tool demonstration (06 Minutes)
5. Strategies and configuration settings to make Django Application secure (07 Minutes)&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Serving Files with Django</title><link href="/djangocon-europe-2021/serving-files-with-django.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Jochen Wersdörfer</name></author><id>tag:,2021-06-04:djangocon-europe-2021/serving-files-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The fairly new support for real async views (since Django 3.1) opened up a lot of new possibilities. I was so excited about them that I wrote a longish blog post about the topic:
Django 3.1 Async (&lt;a class="reference external" href="https://wersdoerfer.de/blogs/ephes_blog/django-31-async/"&gt;https://wersdoerfer.de/blogs/ephes_blog/django-31-async/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This article was also published on paper in a german developer magazine:
Django wird asynchron (&lt;a class="reference external" href="https://kiosk.entwickler.de/entwickler-magazin/entwickler-magazin-6-2020/django-wird-asynchron/"&gt;https://kiosk.entwickler.de/entwickler-magazin/entwickler-magazin-6-2020/django-wird-asynchron/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Back then I had trouble to come up with a compelling use case for those new async views. But now I believe file serving is one of them. Usually you would use nginx in front of your Django application servers, a CDN or just S3 / another object store. But let's face it: This will add another layer of architectural complexity and authentication/authorization will be a real PITA. And some things might get a lot easier with pure Django file serving - let's assume I want to know how long people listened to my podcast delivered via http live streaming on average. If the media file was delivered via Django, it would be possible to log those numbers directly in the App. Otherwise you would have to calculate them from aws access log files or something like that (good luck with that).&lt;/p&gt;
&lt;p&gt;So, using nginx  will probably be still faster and you won't be able to saturate 100Gbit/s. But maybe you don't need to and Django alone is already fast enough. Until june I probably have some benchmarks to prove it or a story about an embarrassing failure :).&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Speed up your tests with setUpTestData</title><link href="/djangocon-europe-2021/speed-up-your-tests-with-setuptestdata.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Adam Johnson</name></author><id>tag:,2021-06-04:djangocon-europe-2021/speed-up-your-tests-with-setuptestdata.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TestCase.setUpTestData allows you to create test data once per TestCase, rather than once per test. Switching tests to use setUpTestData rather than setUp can speed them up significantly, sometimes as much as 10x faster. This talk will cover how it works, its improvement in Django 3.2, and how to convert your tests to use it.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>The request response cycle a Djangonautic journey</title><link href="/djangocon-europe-2021/the-request-response-cycle-a-djangonautic-journey.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Timothy McCurrach</name></author><id>tag:,2021-06-04:djangocon-europe-2021/the-request-response-cycle-a-djangonautic-journey.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How exactly do web-servers communicate with Django? and what happens immediately after that? If you've ever wondered where the &lt;cite&gt;request&lt;/cite&gt; object comes from? How the middleware-chain is put together? Or just what all those functions you see in your exception tracebacks do? Then join me in a deep dive of everything between the server, the view and back again, as we answer these questions and more.&lt;/p&gt;
&lt;p&gt;This talk will be a look under the hood at Django's request handlers, middleware-chain and URL-resolvers. Focusing on just the WSGI route (not asynchronous), it aims to be accessible to beginners, but with the intention that a more experienced user will learn something new or interesting as well.&lt;/p&gt;
&lt;p&gt;We will start off by replacing Django's &lt;cite&gt;WSGIHandler&lt;/cite&gt; with our own &amp;quot;hello world&amp;quot; WSGI application. We'll then build back in additional features until it starts to resemble what we originally had. Along the way, we'll highlight lesser-known features, and give examples demonstrating how understanding the implementation will enable you to better take advantage of the features Django offers, and ultimately write better code.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Unlocking the full potential of PostgreSQL indexes in Django</title><link href="/djangocon-europe-2021/unlocking-the-full-potential-of-postgresql-indexes-in-django.html" rel="alternate"></link><published>2021-06-04T00:00:00+00:00</published><updated>2021-06-04T00:00:00+00:00</updated><author><name>Haki Benita</name></author><id>tag:,2021-06-04:djangocon-europe-2021/unlocking-the-full-potential-of-postgresql-indexes-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the talk we are going to optimize a real life Django application using advanced and exotic indexing techinics in PostgreSQL.&lt;/p&gt;
&lt;p&gt;We are going to address performance issues in real life use cases using advanced indexing features in PostgreSQL:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;B-Tree indexes&lt;/li&gt;
&lt;li&gt;Covering indexes&lt;/li&gt;
&lt;li&gt;Partial indexes&lt;/li&gt;
&lt;li&gt;Function based indexes&lt;/li&gt;
&lt;li&gt;Hash indexes&lt;/li&gt;
&lt;li&gt;BRIN Indexes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are not sure what are all these index types are, this talk is for you!&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Anvil Full Stack Web with Nothing but Python</title><link href="/djangocon-europe-2021/anvil-full-stack-web-with-nothing-but-python.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:,2021-06-03:djangocon-europe-2021/anvil-full-stack-web-with-nothing-but-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a modern web app requires &lt;em&gt;so much&lt;/em&gt;: HTML, CSS, JS, Python, SQL, React, Bootstrap, Webpack...and Django, of course ;). What if we could build a better abstraction?&lt;/p&gt;
&lt;p&gt;Our answer is Anvil: a full-stack Python environment where everything is a Python object, from your UI components to your database rows. In this talk, I'll walk you through how and why we constructed this new approach to the web.&lt;/p&gt;
&lt;p&gt;We'll start with a question: Why is web programming hard? It's because your data takes so many forms: database rows, Python objects, JSON on REST, JS objects, HTML DOM, and finally pixels. Most of a web developer's job is translating between these awkwardly different  representations. Frameworks like Django help, but now you have a stack of leaky abstractions: web frameworks, ORMs, JS frameworks, CSS frameworks, build tools... These frameworks help you go faster, but they double the amount you need to know!&lt;/p&gt;
&lt;p&gt;So I'll show our stab at an answer: A framework where everything is a Python object, requests to the server are function calls, and Python is a browser-side language. I'll talk about running Python in the browser. I'll talk about full-stack autocompletion. There will even be live coding.&lt;/p&gt;
&lt;p&gt;And then I'll talk about how it breaks. Because every abstraction breaks, and this abstraction is bigger than most. So I'll touch on what it means to go down with the ship, to use an ejector seat, or to open an escape hatch.&lt;/p&gt;
&lt;p&gt;Join me for a rollicking tour of a new way to approach the web!&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Clean Architecture with Django Rethinking basic assumptions</title><link href="/djangocon-europe-2021/clean-architecture-with-django-rethinking-basic-assumptions.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Paul Wolf</name></author><id>tag:,2021-06-03:djangocon-europe-2021/clean-architecture-with-django-rethinking-basic-assumptions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clean Architectures and related architecture patterns like Hexagonal and Onion architecture are intended to provide more maintainable code and lower technical debt.&lt;/p&gt;
&lt;p&gt;Two parts of Django's architecture, the Django ORM and 3rd party Django REST Frameworks, make it difficult to get the benefits of a Clean Architecture. We look at ways we can achieve the benefits of Clean Architecture (CA) while using the Django framework.&lt;/p&gt;
&lt;p&gt;What are the various Clean Architecture Patterns and what do they promise to do for you?&lt;/p&gt;
&lt;p&gt;What is the ideal architecture pattern that Django supports?&lt;/p&gt;
&lt;p&gt;Problem 1: most Object Relational Mappings including Django's do two things:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Specify the persistence model: normalisation of data, efficient storage, efficient lookup, etc.&lt;/li&gt;
&lt;li&gt;Specify the business entity domain: what business objects does the domain manage&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem is that these are two different goals handled in one framework component, the ORM.&lt;/p&gt;
&lt;p&gt;Problem 2: REST frameworks have a heavy reliance on the ORM. This ties together the business domain to storage semantics making it hard to achieve some of the benefits of a Clean Architecture.&lt;/p&gt;
&lt;p&gt;Two solutions paths exist:&lt;/p&gt;
&lt;p&gt;Django can serve a clean architecture-like paradigm, under specific circumstances. But there is some confusion about what CA looks like in practice that causes developers to go for solutions that are the opposite of CA.&lt;/p&gt;
&lt;p&gt;The other solution is a more fundamental rethink of how to implement and use ORMs and REST frameworks (including remote request frameworks like GraphQL).&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Create a full stack, reactive website in Django without JavaScript</title><link href="/djangocon-europe-2021/create-a-full-stack-reactive-website-in-django-without-javascript.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Adam Hill</name></author><id>tag:,2021-06-03:djangocon-europe-2021/create-a-full-stack-reactive-website-in-django-without-javascript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a great web framework for &amp;quot;perfectionists with deadlines&amp;quot; and provides a lot of built-in functionality when building server-side websites. However, a lot has changed on the web since its inception in 2005, and now it has become somewhat common advice for modern web applications to only use it as an API backend, if at all.&lt;/p&gt;
&lt;p&gt;However, there are a few Django packages that enable building a reactive website while still utilizing all of the strengths of Django. This talk will cover the benefits of this approach, a brief overview of how other programming languages are solving this same problem, and a few Django projects which can help developers build interactive websites without writing any custom JavaScript.&lt;/p&gt;
&lt;p&gt;Repository with example code, slides, and a transcript: &lt;a class="reference external" href="https://github.com/adamghill/djangocon-eu-2021-conference-talk"&gt;https://github.com/adamghill/djangocon-eu-2021-conference-talk&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Django with PostgreSQL Superpowers</title><link href="/djangocon-europe-2021/django-with-postgresql-superpowers.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:,2021-06-03:djangocon-europe-2021/django-with-postgresql-superpowers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;pre&gt;Every time we’re going to create a new project with **Django** we make assessments on its requirements to choose the best architecture, of which, the **database** is usually the core.

Django is a _database-agnostic_ web framework but natively supports only 4 **open source** databases: PostgreSQL, SQLite, MariaDB and MySQL.

**PostgreSQL** has the _richest feature set_ of any supported database and some of these features are natively supported directly in Django via its contrib module.

In this talk we’ll see how to use to our _advantage_ the features of PostgreSQL as a database in Django, its exclusive features present in its _contrib module_ and also other **superpowers** that can be exploited through the use of _third-party packages_.

--- 

More info and slides: **https://www.paulox.net/2021/06/03/djangocon-europe-2021/**&lt;/pre&gt;</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Dynamic static sites with Django and Sphinx</title><link href="/djangocon-europe-2021/dynamic-static-sites-with-django-and-sphinx.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Carlton Gibson</name></author><id>tag:,2021-06-03:djangocon-europe-2021/dynamic-static-sites-with-django-and-sphinx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On a content site these days, especially on a personal project, or where the
team are technical, you often don't want the limitations and complexity of full
CMS. No, you want to use familiar tools: you want to write in Markdown and
manage your content in git.&lt;/p&gt;
&lt;p&gt;That doesn't necessarily fit the traditional Django workflow. You end up
looking at a static site. This is fine but you loose the ability of Django to
serve dynamic pages. You have to decide which of the numerous generators
you're going to use, or whether indeed you'll roll your own. It's a bit of a
mess.&lt;/p&gt;
&lt;p&gt;You can have the best of all worlds though. Sphinx, yes the
documentation builder, is a super capable static site builder. You can
use it to build your content. Yes it can handle Markdown. Then you can
use Django to serve that content, given auth, forms, interactivity,
custom content, and all the rest of it.&lt;/p&gt;
&lt;p&gt;I'm going to show you how.&lt;/p&gt;
&lt;p&gt;The talk has two parts: Sphinx and then Django.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First we'll introduce using Sphinx to manage and build your content.&lt;/li&gt;
&lt;li&gt;We'll look at project setup so you can use Markdown for files.&lt;/li&gt;
&lt;li&gt;We'll organise those on the file system, and use git to manage them, rather
than a full-blown CMS.&lt;/li&gt;
&lt;li&gt;We'll push to GitHub and use a GitHub Action to build on each commit.&lt;/li&gt;
&lt;li&gt;Then we'll setup Django to serve our Sphinx built content.&lt;/li&gt;
&lt;li&gt;We'll use the DTL to get control over our templates.&lt;/li&gt;
&lt;li&gt;And we'll add auth, to provide dynamic per-user content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From there, the sky's the limit. Content management never looked so rosy.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Hacking Django Channels for Fun and Profit</title><link href="/djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:,2021-06-03:djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro and Backstory on Django Channels history — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Synchronous vs Async Request Loops&lt;/li&gt;
&lt;li&gt;WSGI vs ASGI for your Django Application&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro to WebSockets — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Demo of them used in the real world web applications&lt;/li&gt;
&lt;li&gt;How they interact with async event loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Django Channels Core Concepts — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Consumers&lt;/li&gt;
&lt;li&gt;Channel Layers&lt;/li&gt;
&lt;li&gt;Background Workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Consumers and ASGI Routing Example — 10%&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Where to Background Workers Fit? — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Lightweight Tasks&lt;/li&gt;
&lt;li&gt;Considerations when reliability is not needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;How about reversing the Consumer use case? — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Create long-running Background Workers&lt;/li&gt;
&lt;li&gt;Connect to remote services such as Discord to create Bots&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Example application integration with Discord — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Connect to Discord on start and listen for messages and other events&lt;/li&gt;
&lt;li&gt;Send our own application messages into Discord&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Building your own long-running Channel Worker — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;What to add to your project&lt;/li&gt;
&lt;li&gt;Define channel background tasks to run at start&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Next steps for this project — 2%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Upstream or create Channels addon to make this functionality more generic&lt;/li&gt;
&lt;li&gt;Add ability to define one-shot tasks&lt;/li&gt;
&lt;li&gt;Add ability to define post-job tasks to run on stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion — 2%&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>HTMX Frontend Revolution</title><link href="/djangocon-europe-2021/htmx-frontend-revolution.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Thomas Güttler</name></author><id>tag:,2021-06-03:djangocon-europe-2021/htmx-frontend-revolution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I developed my first CGI script in 1998. Since that day I have seen a lot of hypes coming and going.&lt;/p&gt;
&lt;p&gt;The talk will consist of three parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My humorous odyssey of trying to find a great frontend framework&lt;/li&gt;
&lt;li&gt;Retrospective: What do I want from the frontend?&lt;/li&gt;
&lt;li&gt;I finally found: HTMX: HTML Fragments over the wire&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides simplicity, good Web Vitals performance (SEO) is a benefit of this method.&lt;/p&gt;
&lt;p&gt;The talk will express my personal opinion, feelings and fun. It won't dive into technical details.&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a class="reference external" href="https://www.djangsters.de"&gt;https://www.djangsters.de&lt;/a&gt; for supporting the talk.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1Gx1UGVAgD2ALLOucsIm9myF5mDflbP06-M6_d-RdZAY/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/1Gx1UGVAgD2ALLOucsIm9myF5mDflbP06-M6_d-RdZAY/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example Project: &lt;a class="reference external" href="https://github.com/guettli/django-htmx-fun"&gt;https://github.com/guettli/django-htmx-fun&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>KEYNOTE Spreading our tentacles taking a Django app global</title><link href="/djangocon-europe-2021/keynote-spreading-our-tentacles-taking-a-django-app-global.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Frederike Jaeger</name></author><id>tag:,2021-06-03:djangocon-europe-2021/keynote-spreading-our-tentacles-taking-a-django-app-global.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine you built a pretty snazzy Django app to transform your company's business. You're helping with revolutionizing the energy industry to make better use of green energy. Pretty cool right? Now imagine your company is expanding to new countries and not only that, other companies want to use your app too. Even better! But also imagine you wrote that app specifically with your company in one country in mind. This talk is going to cover the approach we've taken in transforming our app to work for multiple clients in multiple countries while still keeping the core of it the same.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Modern JavaScript for Django Developers</title><link href="/djangocon-europe-2021/modern-javascript-for-django-developers.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Cory Zue</name></author><id>tag:,2021-06-03:djangocon-europe-2021/modern-javascript-for-django-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will include four high level parts.&lt;/p&gt;
&lt;p&gt;Part 1 is a discussion of common Django / JavaScript architectures. These include:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The most common &amp;quot;ad-hoc&amp;quot; approach, where JS just gets incrementally added to templates until you find yourself in a mess&lt;/li&gt;
&lt;li&gt;The &amp;quot;completely decoupled&amp;quot; JS front-end and Django-API back end, which is popular, but complex and unfamiliar to pure Django developers.&lt;/li&gt;
&lt;li&gt;A &amp;quot;hybrid architecture&amp;quot;, that combines modern JS with familiarity of working in Django.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Part 2 will focus on the fundamentals of JS tooling - a prerequisite to working with modern JavaScript. I'll start with explaining why it's so frustrating and confusing trying to add React to a Django project. Then introduce  the concept of a JavaScript toolchain. Why you need them and what they do. And finally do a quick overview of the most common JS toolchain: NPM, Webpack, and Babel, including what each does and the analogies in the Python world.&lt;/p&gt;
&lt;p&gt;Part 3 brings it together with a Django example, deep diving into how you can add a JS toolchain to a DJango project and introduce a React application into a Django application without all the complexity of managing separate standalone front end.&lt;/p&gt;
&lt;p&gt;Part 4 will briefly touch on some benefits of Modern JS, including using modern frameworks, dependency management, new features, extensions, ES6, React and JSX, Vue etc.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>You might not need a frontend framework</title><link href="/djangocon-europe-2021/you-might-not-need-a-frontend-framework.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Afonso Cerejeira</name></author><id>tag:,2021-06-03:djangocon-europe-2021/you-might-not-need-a-frontend-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Javascript fadigue is real. As frontend development gets more and more complex, developers are required to learn a wide plethora of languages and tools to bring reactivity to their web apps.&lt;/p&gt;
&lt;p&gt;Introducing a SPA framework into a Django project can bring a lot of complexity to the codebase, requiring context switching between two different languages (Python and Javascript) and expertise into a wide set of tools, like &lt;cite&gt;node&lt;/cite&gt;, &lt;cite&gt;npm&lt;/cite&gt;, &lt;cite&gt;webpack&lt;/cite&gt; and &lt;cite&gt;babel&lt;/cite&gt;. Accessibility and SEO can also be affected by the introduction of a SPA architecture.&lt;/p&gt;
&lt;p&gt;In this presentation I am going to talk about taking a step back in front-end development and carefully weighting the pros and cons of introducing a Javascript framework into a Django project.
I will also show some examples of how to progressively enhance a web page, adding reactivity while maintaining the accessibility. We will explore some libraries like htmx (&lt;a class="reference external" href="https://htmx.org/"&gt;https://htmx.org/&lt;/a&gt;), hotwire (&lt;a class="reference external" href="https://hotwire.dev/"&gt;https://hotwire.dev/&lt;/a&gt;) and alpinejs (&lt;a class="reference external" href="https://github.com/alpinejs/alpine"&gt;https://github.com/alpinejs/alpine&lt;/a&gt;) that can help keeping the frontend light and lean.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>A SQL for Django</title><link href="/djangocon-europe-2021/a-sql-for-django.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Stefan Baerisch</name></author><id>tag:,2021-06-02:djangocon-europe-2021/a-sql-for-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show you how to combine SQL and ORM in Django applications.
Both ORM methods and SQL have their place.
ORM and Django's model classes give us a great development experience. We get an easy-to-use and powerful way to define, migrate, and use our database.
SQL gives us access to all the features our database has to offer. It&lt;/p&gt;
&lt;p&gt;The talk will be structured as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why care about SQL?&lt;/li&gt;
&lt;li&gt;Working with data in Django - Common ORM use cases&lt;/li&gt;
&lt;li&gt;Creating complex queries: Q, F, annotations&lt;/li&gt;
&lt;li&gt;Creating and Addressing the N+1 query problem with Django ORM.&lt;/li&gt;
&lt;li&gt;Everything works, so why use SQL?&lt;/li&gt;
&lt;li&gt;Minimize Database access for maximal Performance&lt;/li&gt;
&lt;li&gt;Use Features of complex sequel queries; Sub-Selects&lt;/li&gt;
&lt;li&gt;Benefit from the SQL Know-How and documentation&lt;/li&gt;
&lt;li&gt;Best of both worlds: Getting objects with raw queries&lt;/li&gt;
&lt;li&gt;If all else fails: Directly using database connections for updates and analytics&lt;/li&gt;
&lt;li&gt;Drawbacks of SQL in Django&lt;/li&gt;
&lt;li&gt;Review: SQL, Django - How and Why&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Domain Driven Design with Django and GraphQL</title><link href="/djangocon-europe-2021/domain-driven-design-with-django-and-graphql.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Patrick Arminio</name></author><id>tag:,2021-06-02:djangocon-europe-2021/domain-driven-design-with-django-and-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domain driven design is starting getting traction in the Python world, probably also thanks to Architecture Patterns with Python (&lt;a class="reference external" href="https://www.cosmicpython.com/"&gt;https://www.cosmicpython.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In this talk we will learn some basics of Domain Driven Design and how to apply the pattern when using Django and GraphQL. We will see different approaches of modelling the domain, and discuss the tradeoffs. We will discuss why this approach makes a lot of sense with GraphQL and finally we will see a complex approach where we leverage the domain driven architecture to have an easy way to abstract how we store and cache our data in order to build a performant GraphQL API.&lt;/p&gt;
&lt;p&gt;This talk is aimed at people with knowledge of web-development. GraphQL knowledge won’t be necessary as I’ll do a quick introduction of that. Experience with Django, Flask or similar framework might be useful but not required.
The audience will learn basic concepts of domain driven design and how to apply them to build a scalable GraphQL API.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Full stack Django Rest Framework</title><link href="/djangocon-europe-2021/full-stack-django-rest-framework.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Thiago Silva</name></author><id>tag:,2021-06-02:djangocon-europe-2021/full-stack-django-rest-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we want to share our experience going beyond JSON APIs and using more Serializers and Renderers' features to create full-stack applications using Django Rest Framework.&lt;/p&gt;
&lt;p&gt;After many years using only Django and creating many applications with the traditional HTML templates and forms, like most web developers, we started to go more and more into a separate solution of backend and frontend. To do that, we then used Django Rest Framework to create nice JSON APIs. But recently, we started to go back to our roots and create more full-stack applications, but using Rest Framework to get the most of both worlds.&lt;/p&gt;
&lt;p&gt;Our views now not only can render HTML templates and serializers as forms but also, with the support of Renderers, allow us to quickly have JSON and more complex formats like Microsoft Word or Excel document responses. With that, we can render our HTML templates in the backend but already have the same serializers to update our DOM dynamically or download the same data as a report.&lt;/p&gt;
&lt;p&gt;It wasn't as easy as we thought, and we needed to learn a lot during the process, creating our own solutions and extending some parts of Rest Framework itself. We want to share all of that and maybe help you too.&lt;/p&gt;
&lt;p&gt;Photo by Bekir Dönmez (&lt;a class="reference external" href="https://unsplash.com/&amp;#64;bekirdonmeez?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;https://unsplash.com/&amp;#64;bekirdonmeez?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&lt;/a&gt;)&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Hunting Performance in Django Code</title><link href="/djangocon-europe-2021/hunting-performance-in-django-code.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Sümer Cip</name></author><id>tag:,2021-06-02:djangocon-europe-2021/hunting-performance-in-django-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction and Outline&lt;/p&gt;
&lt;p&gt;Quick introduction of myself followed by an outline of what will be covered and what you will learn.&lt;/p&gt;
&lt;p&gt;Why we profile?&lt;/p&gt;
&lt;p&gt;A typical program spends almost all its time in a small subset of its code. Optimizing those hotspots is all that matters. This is what a profiler is for: it leads us straight to the functions where we should spend our effort.&lt;/p&gt;
&lt;p&gt;What types tools are available and how they work?&lt;/p&gt;
&lt;p&gt;-Deterministic Profilers
-Statistical Profilers&lt;/p&gt;
&lt;p&gt;I will be walking over the different use cases, pros/cons for each type. Then I will dig in a bit deeper on how they work under the hood. Understanding the inner workings a bit might be helpful while analysing its output.&lt;/p&gt;
&lt;p&gt;What kind of information do we get?&lt;/p&gt;
&lt;p&gt;I'll describe what kind of output we get from different profilers. What kind of metrics are available(Wall time, CPU time, sub/cumulative time) and where are those metrics are most useful while hunting for performance problems especially
for Web applications. I will also walk over/explain different kind of visualisations that profilers generate: Flamegraphs, Callgraph, SpeedScope...etc.&lt;/p&gt;
&lt;p&gt;Questions&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>KEYNOTE How to be a djangonaut in a climate emergency</title><link href="/djangocon-europe-2021/keynote-how-to-be-a-djangonaut-in-a-climate-emergency.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Chris Adams</name></author><id>tag:,2021-06-02:djangocon-europe-2021/keynote-how-to-be-a-djangonaut-in-a-climate-emergency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The science on climate spells out the need for rapid, far-reaching, and unprecedented changes to how we work and live. What does this mean for the way we build digital services as djangonaugs?&lt;/p&gt;
&lt;p&gt;We’ll explore what we can, and should be doing as professional technologists in a climate emergency, the patterns emerging for more sustainable software engineering, and what a django designed to be the best choice for building future climate tech services might look like.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Programming for pleasure</title><link href="/djangocon-europe-2021/programming-for-pleasure.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:,2021-06-02:djangocon-europe-2021/programming-for-pleasure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Why is so much software so bad?&lt;/strong&gt; And why is so much of it made by really excellent programmers? It's a puzzle to users, who are baffled by the way their software behaves. It's a cause of grief to customer support teams, who have to deal with users' pain. It's exhausting for product managers, who expend vast amounts of energy interacting with engineering teams.&lt;/p&gt;
&lt;p&gt;It's not just a matter of individual frustration though. Bad software emits a kind of pollution that damages working environments, and is expensive to clean up after. It's a drag on the progress of companies that use it, and harms the reputation and success of the companies that make it.&lt;/p&gt;
&lt;p&gt;So, &lt;em&gt;why do software engineering teams make bad software&lt;/em&gt;, when of course they sincerely believe that they are making the best possible software, employing the best possible programmers, following the best processes?&lt;/p&gt;
&lt;p&gt;I argue that there is a reason for it: &lt;strong&gt;programmers are condemned, by the nature of programming itself, to make bad software&lt;/strong&gt;, that we make bad software &lt;strong&gt;because&lt;/strong&gt; programming is pleasurable.&lt;/p&gt;
&lt;p&gt;I'll discuss the consequences of this, and consider what we can do about it. And I will argue that the only way out of this fate is to embrace &lt;strong&gt;pain&lt;/strong&gt;.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Telepath-adding the missing link between Django and rich client apps</title><link href="/djangocon-europe-2021/telepath-adding-the-missing-link-between-django-and-rich-client-apps.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Matt Westcott</name></author><id>tag:,2021-06-02:djangocon-europe-2021/telepath-adding-the-missing-link-between-django-and-rich-client-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today's web applications, the traditional client/server division is falling out of favour - there's an increasing need for the client side to handle not just the presentation layer, but the data model too. But how do you do that without recreating all of your Django business logic in JavaScript?&lt;/p&gt;
&lt;p&gt;This was the problem faced by Wagtail CMS (&lt;a class="reference external" href="https://wagtail.io/"&gt;https://wagtail.io/&lt;/a&gt;) when building a new version of StreamField, the framework for editing and organising structured page content. Our solution was a new library, 'telepath (&lt;a class="reference external" href="https://wagtail.github.io/telepath/"&gt;https://wagtail.github.io/telepath/&lt;/a&gt;)', which can be thought of as a cross-platform version of Python's pickle mechanism, allowing arbitrary object to be unpacked into JavaScript code.&lt;/p&gt;
&lt;p&gt;In this talk, we'll show how Wagtail has used telepath to enhance Django forms with new client-side capabilities, and how you can use it in your projects to get the best of both the server-side and client-side world.&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Writing Safe Database Migrations</title><link href="/djangocon-europe-2021/writing-safe-database-migrations.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:,2021-06-02:djangocon-europe-2021/writing-safe-database-migrations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django’s built-in migration framework is great. And it works tremendously. But that’s only on the surface. Whenever you deploy your code and apply migrations in production, you are about to enter dangerous territory. I will point out common pitfalls and show you ways to avoid them. And with some additional best practices at hand, you will be ready for your next production deployment.&lt;/p&gt;
&lt;p&gt;The talk slides are available on &lt;strong&gt;Speaker Deck&lt;/strong&gt; (&lt;a class="reference external" href="https://speakerdeck.com/markush/writing-safe-database-migrations-djangocon-europe-2021"&gt;https://speakerdeck.com/markush/writing-safe-database-migrations-djangocon-europe-2021&lt;/a&gt;).&lt;/p&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Your very own real time chat with Django Channels</title><link href="/djangocon-europe-2021/your-very-own-real-time-chat-with-django-channels.html" rel="alternate"></link><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:,2021-06-02:djangocon-europe-2021/your-very-own-real-time-chat-with-django-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does building your real time chat with Django sound fun to you? Let’s get some help from Django Channels in order to do so. In this talk I’d like to illustrate how we can use Django Channels for various purposes by showcasing its concepts and diverse use cases.&lt;/p&gt;
&lt;p&gt;This talk will cover beginner topics around Django Channels and will teach attendees the basics in order to build a simple real time chat using the library.&lt;/p&gt;
&lt;p&gt;This talk is mainly directed at beginners who are interested in learning more about Django Channels. It is expected that attendees have basic knowledge of Django (or at least Python).&lt;/p&gt;
&lt;p&gt;Some of the takeaways attendees are expected to have acquired by the end of the talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Django Channels and how does it work?&lt;/li&gt;
&lt;li&gt;Main concepts for basic usage&lt;/li&gt;
&lt;li&gt;How we can use the library to build cool stuff such as a real time chat&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry></feed>