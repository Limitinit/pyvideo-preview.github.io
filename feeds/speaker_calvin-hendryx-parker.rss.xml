<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>/</link><description></description><lastBuildDate>Sat, 02 Oct 2021 00:00:00 +0000</lastBuildDate><item><title>Lightning talks - Wednesday - part 1</title><link>/djangocon-europe-2017/lightning-talks-wednesday-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Quinn</dc:creator><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-04-05:djangocon-europe-2017/lightning-talks-wednesday-part-1.html</guid><category>lightning talks</category></item><item><title>Hacking Django Channels for Fun and Profit</title><link>/djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro and Backstory on Django Channels history — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Synchronous vs Async Request Loops&lt;/li&gt;
&lt;li&gt;WSGI vs ASGI for your Django Application&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro to WebSockets — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Demo of them used in the real world web applications&lt;/li&gt;
&lt;li&gt;How they interact with async event loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Django Channels Core Concepts — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Consumers&lt;/li&gt;
&lt;li&gt;Channel Layers&lt;/li&gt;
&lt;li&gt;Background Workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Consumers and ASGI Routing Example — 10%&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Where to Background Workers Fit? — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Lightweight Tasks&lt;/li&gt;
&lt;li&gt;Considerations when reliability is not needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;How about reversing the Consumer use case? — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Create long-running Background Workers&lt;/li&gt;
&lt;li&gt;Connect to remote services such as Discord to create Bots&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Example application integration with Discord — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Connect to Discord on start and listen for messages and other events&lt;/li&gt;
&lt;li&gt;Send our own application messages into Discord&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Building your own long-running Channel Worker — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;What to add to your project&lt;/li&gt;
&lt;li&gt;Define channel background tasks to run at start&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Next steps for this project — 2%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Upstream or create Channels addon to make this functionality more generic&lt;/li&gt;
&lt;li&gt;Add ability to define one-shot tasks&lt;/li&gt;
&lt;li&gt;Add ability to define post-job tasks to run on stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion — 2%&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-06-03:djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html</guid><category>Django</category><category>DjangoConEU</category><category>djangoconeu2021</category></item><item><title>Finite State Machine (FSM) in Django</title><link>/pycon-us-2020/finite-state-machine-fsm-in-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-04-17:pycon-us-2020/finite-state-machine-fsm-in-django.html</guid></item><item><title>Keynote by Calvin Hendryx-Parker</title><link>/pydata-indy-2018/keynote-by-calvin-hendryx-parker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Calvin Hendryx-Parker opens the PyData Indy 2018 conference with a keynote explaining the different presentations of the day.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-10-12:pydata-indy-2018/keynote-by-calvin-hendryx-parker.html</guid><category>keynote</category></item><item><title>Deploying a Django Virtual Event Platform Using Containers and Terraform</title><link>/pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django
application into the Cloud with Fargate. We’ll dive in with how to getting
up and running fast, but leaving the overhead of managing virtual machines
and Kubernetes behind. Create and store the application Docker images in a
container repository and without touching the AWS console we can create
fully Infrastructure as Code automated deployments via CodePipeline into
Fargate containers and S3 buckets. Deliver the React application via
CloudFront and S3 for full global scalability. Leave the legacy deployments
behind and forge bravely into the new world of Cloud Native applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-10-02:pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html</guid></item><item><title>PyOhio 2010: Controlling UNIX Processes using Supervisor</title><link>/pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Controlling UNIX Processes using Supervisor&lt;/p&gt;
&lt;p&gt;Presented by Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Supervisor is a Python daemon that can control arbitrary processes in a
UNIX- like environment. It features a client/server model of control
that can easily be extended. This talk will cover the configuration and
setup of Supervisor. It will also cover how to extend Supervisor and
take advantage of its XML-RPC interface and ability to react to events
that it generates.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2010-07-31:pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html</guid><category>pyohio</category><category>pyohio2010</category><category>supervisor</category></item><item><title>PyOhio 2010: Lightning Talks</title><link>/pyohio-2010/pyohio-2010--lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Floehr</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2010-07-31:pyohio-2010/pyohio-2010--lightning-talks.html</guid><category>lightning talks</category><category>concurrency</category><category>gil</category><category>lxml</category><category>mercurial</category><category>plone</category><category>plone4</category><category>pyohio</category><category>pyohio2010</category><category>suds</category></item><item><title>Finite State Machine (FSM) in Django</title><link>/python-web-conf-2020/finite-state-machine-fsm-in-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Finite State Machine (FSM) in Django&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Workflows are super powerful tools for automating business processes online. Our everyday life is full of workflows such as requesting time off from work. Many of these are actually Finite State Machines that move from state to state via transitions. Popular CMS’ such as Plone have rich support for workflows, but now with django-fsm we can build quick, lightweight business workflows for our applications. Plus, we have full audit logging and even build visualizations of our workflow to confirm with the business owners generated from the code.&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2020-06-18:python-web-conf-2020/finite-state-machine-fsm-in-django.html</guid><category>PythonWebConf</category><category>PythonWebConf2020</category><category>Django</category></item><item><title>Deploying a Virtual Event Platform Using Fargate and Terraform</title><link>/python-web-conf-2021/deploying-a-virtual-event-platform-using-fargate-and-terraform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Deploying a Virtual Event Platform Using Fargate and Terraform&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Learn to leverage cloud native tools and launch a scalable application into the Cloud with Fargate. We’ll dive in with how to getting up and running fast, but leaving the overhead of managing virtual machines and Kubernetes behind. Create and store the application Docker images in ECR and without touching the AWS console we can create fully Infrastructure as Code automated deployments via CodePipeline into Fargate containers and S3 buckets. Deliver the React application via CloudFront and S3 for full global scalability. Leave the legacy deployments behind and forge bravely into the new world of Cloud applications.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-03-22:python-web-conf-2021/deploying-a-virtual-event-platform-using-fargate-and-terraform.html</guid><category>PythonWebConf</category><category>PythonWebConf2021</category></item><item><title>Hacking Django Channels for Fun (and Profit)</title><link>/python-web-conf-2021/hacking-django-channels-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Hacking Django Channels for Fun (and Profit)&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Django is growing some great async features and Channels has been great for handling websockets connecting from your visitor's browser. But what happens when you need to do more? What if you want to keep long-running connections from Django to other websockets, such as Discord servers?  How do you do this and still leverage all the batteries included with Django? We will show an approach that makes this all possible and easy as a developer.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2021-03-22:python-web-conf-2021/hacking-django-channels-for-fun-and-profit.html</guid><category>PythonWebConf</category><category>PythonWebConf2021</category></item></channel></rss>