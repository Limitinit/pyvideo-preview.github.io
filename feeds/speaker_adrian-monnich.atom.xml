<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_adrian-monnich.atom.xml" rel="self"></link><id>/</id><updated>2020-07-05T00:00:00+00:00</updated><entry><title>useFlask() - or how to use a React frontend for your Flask app</title><link href="/europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Adrian Mönnich</name></author><id>tag:,2019-07-12:europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and
just a bit of AJAX. All the JavaScript is usually included straight from
.js files or just minified with Python tools like webassets.&lt;/p&gt;
&lt;p&gt;But the JavaScript ecosystem has evolved a lot - one can now use tools
like Babel to write modern JS even when targeting older browsers and a
Webpack+Babel build is very straightforward and allows for advanced
preprocessing of JavaScript code.&lt;/p&gt;
&lt;p&gt;In this talk we'll even go one step further and not only use Webpack to
build the assets, but also integrate a small demo Flask app with a React
frontend where the Flask app only serves the static HTML page and uses a
RESTful API to communicate with the React app.&lt;/p&gt;
&lt;p&gt;We'll also look into how to keep convenient Flask features such as URL
building in client-side code (using the js-flask-urls package) and of
course React hooks will be used!&lt;/p&gt;
</summary><category term="JavaScript Web Frameworks"></category><category term="Web Servers and MicroFWs"></category></entry><entry><title>useFlask() - or how to use a React frontend for your Flask app</title><link href="/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Adrian Mönnich</name></author><id>tag:,2020-07-05:flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel to write modern JS even when targeting older browsers and a Webpack+Babel build is very straightforward and allows for advanced preprocessing of JavaScript code. In this talk we'll even go one step further and not only use Webpack to build the assets, but also integrate a small demo Flask app with a React frontend where the Flask app only serves the static HTML page and uses a RESTful API to communicate with the React app. We'll also look into how to keep convenient Flask features such as URL building in client-side code (using the js-flask-urls package) and of course React hooks will be used!&lt;/p&gt;
</summary><category term="ReactJs"></category><category term="Flask"></category><category term="FlaskCon"></category></entry></feed>