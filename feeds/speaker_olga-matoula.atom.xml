<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="/" rel="alternate"></link><link href="/feeds/speaker_olga-matoula.atom.xml" rel="self"></link><id>/</id><updated>2020-07-23T00:00:00+00:00</updated><entry><title>Social distancing from your system’s dependencies: An API’s Story</title><link href="/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Olga Matoula</name></author><id>tag:,2020-07-23:europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot of ugly tests.&lt;/p&gt;
&lt;p&gt;We soon realized our tests required more care and they invoked some difficult questions. Is it possible that the limitations of the testing framework add or give away flaws on your design? Should your architecture be affected by your efforts to test the system? What did we learn in the process?&lt;/p&gt;
&lt;p&gt;This presentation will introduce some testing isolation concepts and discuss how the choice of each can affect your architecture design. We will go through the basics of the unittest.mock library and the pytest framework and explore their potential. By diving into scenarios, attendees will learn where these features can be applied more effectively, and more importantly, how an API design can and should be driven by the value of testability, allowing the tests to be structured around clarity, readability and a happy Continuous Integration platform.&lt;/p&gt;
&lt;p&gt;The target audience includes beginner Pythonistas, who are looking for ways to structure and test their code cleanly, while intermediate developers will enjoy a fun refreshment on dependency isolation and leave the session with practical examples on how to use it more effectively.&lt;/p&gt;
</summary><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Clean Code"></category><category term="System Architecture"></category><category term="TDD"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry></feed>